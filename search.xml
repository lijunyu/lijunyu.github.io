<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[查看Oracle中正在运行的存储过程]]></title>
      <url>https://lijunyu.github.io/2017/06/03/%E6%9F%A5%E7%9C%8BOracle%E4%B8%AD%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>在实际项目中，经常会对一些大表执行一些存储过程，一时执行不完，想知道是否在执行，是否执行完了，或者不想执行了想停掉，怎么办，当然是原谅他啊。。。额，说错了，当然是杀掉它啊。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from v$access o where o.OBJECT like &apos;SP_%&apos; --查找正在运行的对象,获取sid</div><div class="line">select a.serial# from v$session a WHERE A.SID=sid  --通过sid 获取serial#</div><div class="line">alter system kill session &apos;sid,serial#&apos; --eg: alter system kill session &apos;123,3211&apos;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql影响Oracle效率的关键点]]></title>
      <url>https://lijunyu.github.io/2017/05/23/sql%E5%BD%B1%E5%93%8DOracle%E6%95%88%E7%8E%87%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【转】linux-lsof详解]]></title>
      <url>https://lijunyu.github.io/2017/05/02/linux-lsof%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><h4 id="lsof简介"><a href="#lsof简介" class="headerlink" title="lsof简介"></a>lsof简介</h4><p>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。 </p>
<h4 id="lsof使用"><a href="#lsof使用" class="headerlink" title="lsof使用"></a>lsof使用</h4><p>lsof输出信息含义<br>在终端下输入lsof即可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">COMMAND    PID      USER   FD      TYPE     DEVICE     SIZE       NODE      NAME</div><div class="line">init       1         root  cwd      DIR       3,3       1024       2         /</div><div class="line">init       1         root  rtd      DIR       3,3       1024       2         /</div><div class="line">init       1         root  txt      REG       3,3       38432      1763452  /sbin/init</div><div class="line">init       1         root  mem      REG       3,3       106114     1091620  /lib/libdl-2.6.so</div><div class="line">init       1         root  mem      REG       3,3       7560696    1091614  /lib/libc-2.6.so</div><div class="line">init       1         root  mem      REG       3,3       79460      1091669  /lib/libselinux.so.1</div><div class="line">init       1         root  mem      REG       3,3       223280     1091668  /lib/libsepol.so.1</div><div class="line">init       1         root  mem      REG       3,3       564136     1091607  /lib/ld-2.6.so</div><div class="line">init       1         root  10u      FIFO      0,15                  1309     /dev/initctl</div></pre></td></tr></table></figure>
<p>每行显示一个打开的文件，若不指定条件默认将显示所有进程打开的所有文件。lsof输出各列信息的意义如下：<br><strong>COMMAND</strong>：进程的名称<br><strong>PID</strong>：进程标识符<br><strong>USER</strong>：进程所有者<br><strong>FD</strong>：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等<br><strong>TYPE</strong>：文件类型，如DIR、REG等<br><strong>DEVICE</strong>：指定磁盘的名称<br><strong>SIZE</strong>：文件的大小<br><strong>NODE</strong>：索引节点（文件在磁盘上的标识）<br><strong>NAME</strong>：打开文件的确切名称<br>其中FD 列中的文件描述符cwd 值表示应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改。<br>txt 类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序。其次数值表示应用<br>程序的文件描述符，这是打开该文件时返回的一个整数。如上的最后一行文件/dev/initctl，其文件描述符为 10。u 表示该<br>文件被打开并处于读取/写入模式，而不是只读 ® 或只写 (w) 模式。同时还有大写 的W 表示该应用程序具有对整个文件的写<br>锁。该文件描述符用于确保每次只能打开一个应用程序实例。初始打开每个应用程序时，都具有三个文件描述符，从 0 到 2，<br>分别表示标准输入、输出和错误流。所以大多数应用程序所打开的文件的 FD 都是从 3 开始。<br>与 FD 列相比，Type 列则比较直观。文件和目录分别称为 REG 和 DIR。而CHR 和 BLK，分别表示字符和块设备；<br>或者 UNIX、FIFO 和 IPv4，分别表示 UNIX 域套接字、先进先出 (FIFO) 队列和网际协议 (IP) 套接字。 </p>
<h4 id="lsof常用参数"><a href="#lsof常用参数" class="headerlink" title="lsof常用参数"></a>lsof常用参数</h4><p>lsof 常见的用法是查找应用程序打开的文件的名称和数目。可用于查找出某个特定应用程序将日志数据记录到何处，或者正在跟踪某个问题。<br>例如，linux限制了进程能够打开文件的数目。通常这个数值很大，所以不会产生问题，并且在需要时，应用程序可以请求更大的值（直到某<br>个上限）。如果你怀疑应用程序耗尽了文件描述符，那么可以使用 lsof 统计打开的文件数目，以进行验证。lsof语法格式是：<br>lsof ［options］ filename<br>常用的参数列表：<br>lsof  filename 显示打开指定文件的所有进程<br>lsof -a 表示两个参数都必须满足时才显示结果<br>lsof -c string   显示COMMAND列中包含指定字符的进程所有打开的文件<br>lsof -u username  显示所属user进程打开的文件<br>lsof -g gid 显示归属gid的进程情况<br>lsof +d /DIR/ 显示目录下被进程打开的文件<br>lsof +D /DIR/ 同上，但是会搜索目录下的所有目录，时间相对较长<br>lsof -d FD 显示指定文件描述符的进程<br>lsof -n 不将IP转换为hostname，缺省是不加上-n参数<br>lsof -i 用以显示符合条件的进程情况<br>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]<br>            46 –&gt; IPv4 or IPv6<br>            protocol –&gt; TCP or UDP<br>            hostname –&gt; Internet host name<br>            hostaddr –&gt; IPv4地址<br>            service –&gt; /etc/service中的 service name (可以不只一个)<br>            port –&gt; 端口号 (可以不只一个)<br>例如： 查看22端口现在运行的情况 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># lsof -i :22</div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE NODE NAME</div><div class="line">sshd    1409 root    3u  IPv6   5678       TCP *:ssh (LISTEN)</div><div class="line">查看所属root用户进程所打开的文件类型为txt的文件: </div><div class="line"># lsof -a -u root -d txt</div><div class="line">COMMAND    PID USER  FD      TYPE DEVICE    SIZE    NODE NAME</div><div class="line">init       1    root txt       REG    3,3   38432 1763452 /sbin/init</div><div class="line">mingetty  1632 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">mingetty  1633 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">mingetty  1634 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">mingetty  1635 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">mingetty  1636 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">mingetty  1637 root txt       REG    3,3   14366 1763337 /sbin/mingetty</div><div class="line">kdm        1638 root txt       REG    3,3  132548 1428194 /usr/bin/kdm</div><div class="line">X          1670 root txt       REG    3,3 1716396 1428336 /usr/bin/Xorg</div><div class="line">kdm        1671 root txt       REG    3,3  132548 1428194 /usr/bin/kdm</div><div class="line">startkde  2427 root txt       REG    3,3  645408 1544195 /bin/bash</div><div class="line">... ...</div></pre></td></tr></table></figure>
<h4 id="lsof使用实例"><a href="#lsof使用实例" class="headerlink" title="lsof使用实例"></a>lsof使用实例</h4><h5 id="一、查找谁在使用文件系统"><a href="#一、查找谁在使用文件系统" class="headerlink" title="一、查找谁在使用文件系统"></a>一、查找谁在使用文件系统</h5><p>在卸载文件系统时，如果该文件系统中有任何打开的文件，操作通常将会失败。那么通过lsof可以找出那些进程在使用当前要卸载的文件系统，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># lsof  /GTES11/</div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE NODE NAME</div><div class="line">bash    4208 root  cwd    DIR    3,1 4096    2 /GTES11/</div><div class="line">vim     4230 root  cwd    DIR    3,1 4096    2 /GTES11/</div></pre></td></tr></table></figure>
<p>在这个示例中，用户root正在其/GTES11目录中进行一些操作。一个 bash是实例正在运行，并且它当前的目录为/GTES11，另一个则显示的是vim正在编辑/GTES11下的文件。要成功地卸载/GTES11，应该在通知用户以确保情况正常之后，中止这些进程。 这个示例说明了应用程序的当前工作目录非常重要，因为它仍保持着文件资源，并且可以防止文件系统被卸载。这就是为什么大部分守护进程（后台进程）将它们的目录更改为根目录、或服务特定的目录（如 sendmail 示例中的 /var/spool/mqueue）的原因，以避免该守护进程阻止卸载不相关的文件系统。 </p>
<h5 id="二、恢复删除的文件"><a href="#二、恢复删除的文件" class="headerlink" title="二、恢复删除的文件"></a>二、恢复删除的文件</h5><p>当Linux计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以通过lsof来恢复这些文件。<br>当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。<br>在/proc 目录下，其中包含了反映内核和进程树的各种文件。/proc目录挂载的是在内存中所映射的一块区域，所以这些文件和目录并不存在于磁盘中，因此当我们对这些文件进行读取和写入时，实际上是在从内存中获取相关信息。大多数与 lsof 相关的信息都存储于以进程的 PID 命名的目录中，即 /proc/1234 中包含的是 PID 为 1234 的进程的信息。每个进程目录中存在着各种文件，它们可以使得应用程序简单地了解进程的内存空间、文件描述符列表、指向磁盘上的文件的符号链接和其他系统信息。lsof 程序使用该信息和其他关于内核内部状态的信息来产生其输出。所以lsof 可以显示进程的文件描述符和相关的文件名等信息。也就是我们通过访问进程的文件描述符可以找到该文件的相关信息。 </p>
<p>当系统中的某个文件被意外地删除了，只要这个时候系统中还有进程正在访问该文件，那么我们就可以通过lsof从/proc目录下恢复该文件的内容。 假如由于误操作将/var/log/messages文件删除掉了，那么这时要将/var/log/messages文件恢复的方法如下：<br>首先使用lsof来查看当前是否有进程打开/var/logmessages文件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># lsof |grep /var/log/messages</div><div class="line">syslogd   1283      root    2w      REG        3,3  5381017    1773647 /var/log/messages (deleted)</div></pre></td></tr></table></figure>
<p>从上面的信息可以看到 PID 1283（syslogd）打开文件的文件描述符为 2。同时还可以看到/var/log/messages已经标记被删除了。因此我们可以在 /proc/1283/fd/2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># head -n 10 /proc/1283/fd/2</div><div class="line">Aug  4 13:50:15 holmes86 syslogd 1.4.1: restart.</div><div class="line">Aug  4 13:50:15 holmes86 kernel: klogd 1.4.1, log source = /proc/kmsg started.</div><div class="line">Aug  4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 (root@everestbuilder.linux-ren.org) (gcc version 4.2.0) #1 SMP Wed Jul 18 11:18:32 EDT 2007</div><div class="line">Aug  4 13:50:15 holmes86 kernel: BIOS-provided physical RAM map:</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000000000 - 000000000009f000 (usable)</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000000009f000 - 00000000000a0000 (reserved)</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 0000000000100000 - 000000001f7d3800 (usable)</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 000000001f7d3800 - 0000000020000000 (reserved)</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000e0000000 - 00000000f0007000 (reserved)</div><div class="line">Aug  4 13:50:15 holmes86 kernel:  BIOS-e820: 00000000f0008000 - 00000000f000c000 (reserved)</div></pre></td></tr></table></figure>
<p>从上面的信息可以看出，查看 /proc/8663/fd/15 就可以得到所要恢复的数据。如果可以通过文件描述符查看相应的数据，那么就可以使用 I/O 重定向将其复制到文件中，如:<br>cat /proc/1283/fd/2 &gt; /var/log/messages<br>对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。 </p>
<p><a href="http://blog.csdn.net/guoguo1980/article/details/2324454" target="_blank" rel="external">【转】Linux lsof 详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[打开的文件过多]]></title>
      <url>https://lijunyu.github.io/2017/05/02/%E6%89%93%E5%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%9A/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p><strong>首先普及几个知识：</strong></p>
<ol>
<li>Linux下一切都是文件，包括输入输出设备、网络连接、socket、管道等</li>
<li>与文件打开数最相关的是文件描述符（有的人喜欢称作文件标识符，英文为file descriptor），文件打开数的实质就是文件描述符的数量</li>
<li>文件打开数的多少取决于系统种类、内存大小，int（语言关键字，如C99的int）长度（非负整数），以及系统管理员的设定</li>
<li>最大文件打开数是针对一个进程而言，即一个进程能打开的文件句柄数目是有限的，不能超过最大文件打开数</li>
<li>ulimit命令只对当前shell有效，因此在编写Shell脚本时，如果需要并能控制文件最大打开数，则先执行“ulimit -n 文件打开数”命令，在去执行下面的内容</li>
<li>在Linux中被打开的文件描述符存放在/proc/PID/fd/，其中PID就是process identifier。</li>
</ol>
<p>除了需要注意，还需要注意ulimit -v unlimited，最大可用的虚拟内存（The maximum amount of virtual memory available to the shell and, on some systems, to its children）</p>
<p>  大多数原因是因为程序没有关闭打开的资源连接， 如RMI、数据库等连接才导致的。 当然也有可能能同时有超过Linux本身默认的文件打开数。</p>
<h3 id="一、-先从Linux设置入手"><a href="#一、-先从Linux设置入手" class="headerlink" title="一、 先从Linux设置入手"></a>一、 先从Linux设置入手</h3><h4 id="1-ulimit-a-查看资源设置情况"><a href="#1-ulimit-a-查看资源设置情况" class="headerlink" title="(1) ulimit -a (查看资源设置情况"></a>(1) ulimit -a (查看资源设置情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">core file size          (blocks, -c) 0  </div><div class="line">data seg size           (kbytes, -d) unlimited  </div><div class="line">scheduling priority             (-e) 0  </div><div class="line">file size               (blocks, -f) unlimited  </div><div class="line">pending signals                 (-i) 30525  </div><div class="line">max locked memory       (kbytes, -l) 64  </div><div class="line">max memory size         (kbytes, -m) unlimited  </div><div class="line">open files                      (-n) 1024  </div><div class="line">pipe size            (512 bytes, -p) 8  </div><div class="line">POSIX message queues     (bytes, -q) 819200  </div><div class="line">real-time priority              (-r) 0  </div><div class="line">stack size              (kbytes, -s) 10240  </div><div class="line">cpu time               (seconds, -t) unlimited  </div><div class="line">max user processes              (-u) 1024  </div><div class="line">virtual memory          (kbytes, -v) unlimited  </div><div class="line">file locks                      (-x) unlimited</div></pre></td></tr></table></figure>
<p>open files默认是1024</p>
<p>为了使服务器重启设置还能生效， 采取永久改变的方法。<br><code>vim /etc/security/limits.conf</code><br>在文档最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* soft nofile 65535  </div><div class="line">* hard nofile 65535</div></pre></td></tr></table></figure>
<h4 id="2-vim-etc-pam-d-login"><a href="#2-vim-etc-pam-d-login" class="headerlink" title="(2) vim  /etc/pam.d/login"></a>(2) vim  /etc/pam.d/login</h4><p>在文档最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session required /lib/security/pam_limits.so</div></pre></td></tr></table></figure>
<h3 id="二、-程序"><a href="#二、-程序" class="headerlink" title="二、 程序"></a>二、 程序</h3><p>记得在finally语句块里面关闭资源连接， 如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">finally&#123;  </div><div class="line">            if (connector != null) &#123;  </div><div class="line">                connector.close();  </div><div class="line">            &#125;  </div><div class="line">              </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>一些与文件打开数相关的命令以及其他相关命令：</p>
<ol>
<li>查看当前系统的文件打开总数（Maximum number of opened files）：cat /proc/sys/fs/file-max</li>
<li>查看当前进程的文件打开数：lsof -p 16075 | wc –l</li>
<li>查看当前端口的文件打开数：lsof -i:80 | wc -l</li>
<li>在使用lsof之前需要注意，lsof不适合查看一个连接数很高或者数量动态变化过快的进程或端口</li>
<li>查看某个进程使用的文件：lsof -p 16075</li>
<li>查看某个端口使用的文件：lsof -i:80</li>
<li>查看使用某个文件的用户和程序：fuser -v /bin/bash</li>
<li>如果需要查看所有进程的文件打开数，如下图命令lsof |wc -l </li>
<li>Markup一个有用的分类知识的网站：<a href="https://en.wikipedia.org/wiki/Category:Unix_file_system_technology" target="_blank" rel="external">https://en.wikipedia.org/wiki/Category:Unix_file_system_technology</a></li>
</ol>
<p>【参考资料】<br><a href="http://blog.csdn.net/wenniuwuren/article/details/45039449" target="_blank" rel="external">http://blog.csdn.net/wenniuwuren/article/details/45039449</a><br><a href="http://dgd2010.blog.51cto.com/1539422/1676843" target="_blank" rel="external">http://dgd2010.blog.51cto.com/1539422/1676843</a><br><a href="http://www.cnblogs.com/405845829qq/p/5919495.html" target="_blank" rel="external">http://www.cnblogs.com/405845829qq/p/5919495.html</a><br><a href="http://blog.itpub.net/220284/viewspace-1024475/" target="_blank" rel="external">http://blog.itpub.net/220284/viewspace-1024475/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式-责任链模式]]></title>
      <url>https://lijunyu.github.io/2017/04/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>　　被别人问到，自己只知道这个名字，但是完全不知道内容，竟然还是这么常用的设计的模式，丢人啊，然后找到一篇，介绍简单好理解的文章，转过来。<br>　　<a href="http://www.cnblogs.com/java-my-life/archive/2012/05/28/2516865.html" target="_blank" rel="external">【原文】《JAVA与模式》之责任链模式</a><br>　　在阎宏博士的《JAVA与模式》一书中开头是这样描述责任链（Chain of Responsibility）模式的：<br><strong>      责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</strong><br>　　作者举了一个击鼓传花的例子，甚是形象</p>
<h3 id="从击鼓传花谈起"><a href="#从击鼓传花谈起" class="headerlink" title="从击鼓传花谈起"></a>从击鼓传花谈起</h3><p>　　击鼓传花是一种热闹而又紧张的饮酒游戏。在酒宴上宾客依次坐定位置，由一人击鼓，击鼓的地方与传花的地方是分开的，以示公正。开始击鼓时，花束就开始依次传递，鼓声一落，如果花束在某人手中，则该人就得饮酒。<br>　　比如说，贾母、贾赦、贾政、贾宝玉和贾环是五个参加击鼓传花游戏的传花者，他们组成一个环链。击鼓者将花传给贾母，开始传花游戏。花由贾母传给贾赦，由贾赦传给贾政，由贾政传给贾宝玉，又贾宝玉传给贾环，由贾环传回给贾母，如此往复，如下图所示。当鼓声停止时，手中有花的人就得执行酒令。<br><img src="http://upload-images.jianshu.io/upload_images/331652-9a178abc0595a241.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>　　击鼓传花便是责任链模式的应用。责任链可能是一条直线、一个环链或者一个树结构的一部分。</p>
<h3 id="责任链模式的结构"><a href="#责任链模式的结构" class="headerlink" title="责任链模式的结构"></a>责任链模式的结构</h3><p>　　下面使用了一个责任链模式的最简单的实现。<br><img src="http://upload-images.jianshu.io/upload_images/331652-6f5e90cbbbf023bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>责任链模式涉及到的角色如下所示：<br>●<strong>抽象处理者(Handler)角色：</strong>定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。上图中Handler类的聚合关系给出了具体子类对下家的引用，抽象方法handleRequest()规范了子类处理请求的操作。<br>●<strong>具体处理者(ConcreteHandler)角色：</strong>具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。<br>源代码<br>抽象处理者角色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public abstract class Handler &#123;</div><div class="line">    /**</div><div class="line">     * 持有后继的责任对象</div><div class="line">     */</div><div class="line">    protected Handler successor;</div><div class="line">    /**</div><div class="line">     * 示意处理请求的方法，虽然这个示意方法是没有传入参数的</div><div class="line">     * 但实际是可以传入参数的，根据具体需要来选择是否传递参数</div><div class="line">     */</div><div class="line">    public abstract void handleRequest();</div><div class="line">    /**</div><div class="line">     * 取值方法</div><div class="line">     */</div><div class="line">    public Handler getSuccessor() &#123;</div><div class="line">        return successor;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 赋值方法，设置后继的责任对象</div><div class="line">     */</div><div class="line">    public void setSuccessor(Handler successor) &#123;</div><div class="line">        this.successor = successor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体处理者角色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class ConcreteHandler extends Handler &#123;</div><div class="line">    /**</div><div class="line">     * 处理方法，调用此方法处理请求</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void handleRequest() &#123;</div><div class="line">        /**</div><div class="line">         * 判断是否有后继的责任对象</div><div class="line">         * 如果有，就转发请求给后继的责任对象</div><div class="line">         * 如果没有，则处理请求</div><div class="line">         */</div><div class="line">        if(getSuccessor() != null)</div><div class="line">        &#123;            </div><div class="line">            System.out.println(&quot;放过请求&quot;);</div><div class="line">            getSuccessor().handleRequest();            </div><div class="line">        &#125;else</div><div class="line">        &#123;            </div><div class="line">            System.out.println(&quot;处理请求&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Client &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //组装责任链</div><div class="line">        Handler handler1 = new ConcreteHandler();</div><div class="line">        Handler handler2 = new ConcreteHandler();</div><div class="line">        handler1.setSuccessor(handler2);</div><div class="line">        //提交请求</div><div class="line">        handler1.handleRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可以看出，客户端创建了两个处理者对象，并指定第一个处理者对象的下家是第二个处理者对象，而第二个处理者对象没有下家。然后客户端将请求传递给第一个处理者对象。</p>
<p>　　由于本示例的传递逻辑非常简单：只要有下家，就传给下家处理；如果没有下家，就自行处理。因此，第一个处理者对象接到请求后，会将请求传递给第二个处理者对象。由于第二个处理者对象没有下家，于是自行处理请求。活动时序图如下所示。<br><img src="http://upload-images.jianshu.io/upload_images/331652-a1272c7c50c1b847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>　　来考虑这样一个功能:申请聚餐费用的管理。</p>
<p>　　很多公司都是这样的福利，就是项目组或者是部门可以向公司申请一些聚餐费用，用于组织项目组成员或者是部门成员进行聚餐活动。</p>
<p>　　申请聚餐费用的大致流程一般是：由申请人先填写申请单，然后交给领导审批，如果申请批准下来，领导会通知申请人审批通过，然后申请人去财务领取费用，如果没有批准下来，领导会通知申请人审批未通过，此事也就此作罢。</p>
<p>　　不同级别的领导，对于审批的额度是不一样的，比如，项目经理只能审批500元以内的申请；部门经理能审批1000元以内的申请；而总经理可以审核任意额度的申请。</p>
<p>　　也就是说，当某人提出聚餐费用申请的请求后，该请求会经由项目经理、部门经理、总经理之中的某一位领导来进行相应的处理，但是提出申请的人并不知道最终会由谁来处理他的请求，一般申请人是把自己的申请提交给项目经理，或许最后是由总经理来处理他的请求。</p>
<p>　　可以使用责任链模式来实现上述功能：当某人提出聚餐费用申请的请求后，该请求会在 项目经理—〉部门经理—〉总经理 这样一条领导处理链上进行传递，发出请求的人并不知道谁会来处理他的请求，每个领导会根据自己的职责范围，来判断是处理请求还是把请求交给更高级别的领导，只要有领导处理了，传递就结束了。</p>
<p>　　需要把每位领导的处理独立出来，实现成单独的职责处理对象，然后为它们提供一个公共的、抽象的父职责对象，这样就可以在客户端来动态地组合职责链，实现不同的功能要求了。<br><img src="http://upload-images.jianshu.io/upload_images/331652-ab904833c6d00280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>抽象处理者角色类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public abstract class Handler &#123;</div><div class="line">    /**</div><div class="line">     * 持有下一个处理请求的对象</div><div class="line">     */</div><div class="line">    protected Handler successor = null;</div><div class="line">    /**</div><div class="line">     * 取值方法</div><div class="line">     */</div><div class="line">    public Handler getSuccessor() &#123;</div><div class="line">        return successor;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 设置下一个处理请求的对象</div><div class="line">     */</div><div class="line">    public void setSuccessor(Handler successor) &#123;</div><div class="line">        this.successor = successor;</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     * 处理聚餐费用的申请</div><div class="line">     * @param user    申请人</div><div class="line">     * @param fee    申请的钱数</div><div class="line">     * @return        成功或失败的具体通知</div><div class="line">     */</div><div class="line">    public abstract String handleFeeRequest(String user , double fee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体处理者角色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ProjectManager extends Handler &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String handleFeeRequest(String user, double fee) &#123;</div><div class="line">        </div><div class="line">        String str = &quot;&quot;;</div><div class="line">        //项目经理权限比较小，只能在500以内</div><div class="line">        if(fee &lt; 500)</div><div class="line">        &#123;</div><div class="line">            //为了测试，简单点，只同意张三的请求</div><div class="line">            if(&quot;张三&quot;.equals(user))</div><div class="line">            &#123;</div><div class="line">                str = &quot;成功：项目经理同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;    </div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                //其他人一律不同意</div><div class="line">                str = &quot;失败：项目经理不同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;else</div><div class="line">        &#123;</div><div class="line">            //超过500，继续传递给级别更高的人处理</div><div class="line">            if(getSuccessor() != null)</div><div class="line">            &#123;</div><div class="line">                return getSuccessor().handleFeeRequest(user, fee);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class DeptManager extends Handler &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String handleFeeRequest(String user, double fee) &#123;</div><div class="line">        </div><div class="line">        String str = &quot;&quot;;</div><div class="line">        //部门经理的权限只能在1000以内</div><div class="line">        if(fee &lt; 1000)</div><div class="line">        &#123;</div><div class="line">            //为了测试，简单点，只同意张三的请求</div><div class="line">            if(&quot;张三&quot;.equals(user))</div><div class="line">            &#123;</div><div class="line">                str = &quot;成功：部门经理同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;    </div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                //其他人一律不同意</div><div class="line">                str = &quot;失败：部门经理不同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;else</div><div class="line">        &#123;</div><div class="line">            //超过1000，继续传递给级别更高的人处理</div><div class="line">            if(getSuccessor() != null)</div><div class="line">            &#123;</div><div class="line">                return getSuccessor().handleFeeRequest(user, fee);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class GeneralManager extends Handler &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String handleFeeRequest(String user, double fee) &#123;</div><div class="line">        </div><div class="line">        String str = &quot;&quot;;</div><div class="line">        //总经理的权限很大，只要请求到了这里，他都可以处理</div><div class="line">        if(fee &gt;= 1000)</div><div class="line">        &#123;</div><div class="line">            //为了测试，简单点，只同意张三的请求</div><div class="line">            if(&quot;张三&quot;.equals(user))</div><div class="line">            &#123;</div><div class="line">                str = &quot;成功：总经理同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;    </div><div class="line">            &#125;else</div><div class="line">            &#123;</div><div class="line">                //其他人一律不同意</div><div class="line">                str = &quot;失败：总经理不同意【&quot; + user + &quot;】的聚餐费用，金额为&quot; + fee + &quot;元&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;else</div><div class="line">        &#123;</div><div class="line">            //如果还有后继的处理对象，继续传递</div><div class="line">            if(getSuccessor() != null)</div><div class="line">            &#123;</div><div class="line">                return getSuccessor().handleFeeRequest(user, fee);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return str;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //先要组装责任链</div><div class="line">        Handler h1 = new GeneralManager();</div><div class="line">        Handler h2 = new DeptManager();</div><div class="line">        Handler h3 = new ProjectManager();</div><div class="line">        h3.setSuccessor(h2);</div><div class="line">        h2.setSuccessor(h1);</div><div class="line">        </div><div class="line">        //开始测试</div><div class="line">        String test1 = h3.handleFeeRequest(&quot;张三&quot;, 300);</div><div class="line">        System.out.println(&quot;test1 = &quot; + test1);</div><div class="line">        String test2 = h3.handleFeeRequest(&quot;李四&quot;, 300);</div><div class="line">        System.out.println(&quot;test2 = &quot; + test2);</div><div class="line">        System.out.println(&quot;---------------------------------------&quot;);</div><div class="line">        </div><div class="line">        String test3 = h3.handleFeeRequest(&quot;张三&quot;, 700);</div><div class="line">        System.out.println(&quot;test3 = &quot; + test3);</div><div class="line">        String test4 = h3.handleFeeRequest(&quot;李四&quot;, 700);</div><div class="line">        System.out.println(&quot;test4 = &quot; + test4);</div><div class="line">        System.out.println(&quot;---------------------------------------&quot;);</div><div class="line">        </div><div class="line">        String test5 = h3.handleFeeRequest(&quot;张三&quot;, 1500);</div><div class="line">        System.out.println(&quot;test5 = &quot; + test5);</div><div class="line">        String test6 = h3.handleFeeRequest(&quot;李四&quot;, 1500);</div><div class="line">        System.out.println(&quot;test6 = &quot; + test6);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/331652-e7f4c74390e25caa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="纯的与不纯的责任链模式"><a href="#纯的与不纯的责任链模式" class="headerlink" title="纯的与不纯的责任链模式"></a>纯的与不纯的责任链模式</h3><p>　　一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一是承担责任，二是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又 把责任向下传的情况。</p>
<p>　　在一个纯的责任链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的责任链模式里面，一个请求可以最终不被任何接收端对象所接收。</p>
<p>　　纯的责任链模式的实际例子很难找到，一般看到的例子均是不纯的责任链模式的实现。有些人认为不纯的责任链根本不是责任链模式，这也许是有道理的。但是在实际的系统里，纯的责任链很难找到。如果坚持责任链不纯便不是责任链模式，那么责任链模式便不会有太大意义了。</p>
<h3 id="责任链模式在Tomcat中的应用"><a href="#责任链模式在Tomcat中的应用" class="headerlink" title="责任链模式在Tomcat中的应用"></a>责任链模式在Tomcat中的应用</h3><p>　　众所周知Tomcat中的Filter就是使用了责任链模式，创建一个Filter除了要在web.xml文件中做相应配置外，还需要实现javax.servlet.Filter接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class TestFilter implements Filter&#123;</div><div class="line"></div><div class="line">    public void doFilter(ServletRequest request, ServletResponse response,</div><div class="line">            FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">        </div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void destroy() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用DEBUG模式所看到的结果如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/331652-07e75a9409b1d394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>　　其实在真正执行到TestFilter类之前，会经过很多Tomcat内部的类。顺带提一下其实Tomcat的容器设置也是责任链模式，注意被红色方框所圈中的类，从Engine到Host再到Context一直到Wrapper都是通过一个链传递请求。被绿色方框所圈中的地方有一个名为ApplicationFilterChain的类，ApplicationFilterChain类所扮演的就是抽象处理者角色，而具体处理者角色由各个Filter扮演。</p>
<p>　　第一个疑问是ApplicationFilterChain将所有的Filter存放在哪里？</p>
<p>　　答案是保存在ApplicationFilterChain类中的一个ApplicationFilterConfig对象的数组中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * Filters.</div><div class="line">  */</div><div class="line"> private ApplicationFilterConfig[] filters = </div><div class="line">     new ApplicationFilterConfig[0];</div></pre></td></tr></table></figure>
<p>　　那ApplicationFilterConfig对象又是什么呢？</p>
<p>　   ApplicationFilterConfig是一个Filter容器。以下是ApplicationFilterConfig类的声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Implementation of a &lt;code&gt;javax.servlet.FilterConfig&lt;/code&gt; useful in</div><div class="line"> * managing the filter instances instantiated when a web application</div><div class="line"> * is first started.</div><div class="line"> *</div><div class="line"> * @author Craig R. McClanahan</div><div class="line"> * @version $Id: ApplicationFilterConfig.java 1201569 2011-11-14 01:36:07Z kkolinko $</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>　　当一个web应用首次启动时ApplicationFilterConfig会自动实例化，它会从该web应用的web.xml文件中读取配置的Filter的信息，然后装进该容器。</p>
<p>　　刚刚看到在ApplicationFilterChain类中所创建的ApplicationFilterConfig数组长度为零，那它是在什么时候被重新赋值的呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private ApplicationFilterConfig[] filters = </div><div class="line">        new ApplicationFilterConfig[0];</div></pre></td></tr></table></figure>
<p>是在调用ApplicationFilterChain类的addFilter()方法时。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line">     * The int which gives the current number of filters in the chain.</div><div class="line">     */</div><div class="line">    private int n = 0;</div><div class="line"></div><div class="line"> public static final int INCREMENT = 10;</div><div class="line"></div><div class="line">void addFilter(ApplicationFilterConfig filterConfig) &#123;</div><div class="line"></div><div class="line">        // Prevent the same filter being added multiple times</div><div class="line">        for(ApplicationFilterConfig filter:filters)</div><div class="line">            if(filter==filterConfig)</div><div class="line">                return;</div><div class="line"></div><div class="line">        if (n == filters.length) &#123;</div><div class="line">            ApplicationFilterConfig[] newFilters =</div><div class="line">                new ApplicationFilterConfig[n + INCREMENT];</div><div class="line">            System.arraycopy(filters, 0, newFilters, 0, n);</div><div class="line">            filters = newFilters;</div><div class="line">        &#125;</div><div class="line">        filters[n++] = filterConfig;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　变量n用来记录当前过滤器链里面拥有的过滤器数目，默认情况下n等于0，ApplicationFilterConfig对象数组的长度也等于0，所以当第一次调用addFilter()方法时，if (n == filters.length)的条件成立，ApplicationFilterConfig数组长度被改变。之后filters[n++] = filterConfig;将变量filterConfig放入ApplicationFilterConfig数组中并将当前过滤器链里面拥有的过滤器数目+1。</p>
<p>　　那ApplicationFilterChain的addFilter()方法又是在什么地方被调用的呢？</p>
<p>　　是在ApplicationFilterFactory类的createFilterChain()方法中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">public ApplicationFilterChain createFilterChain</div><div class="line">        (ServletRequest request, Wrapper wrapper, Servlet servlet) &#123;</div><div class="line"></div><div class="line">        // get the dispatcher type</div><div class="line">        DispatcherType dispatcher = null; </div><div class="line">        if (request.getAttribute(DISPATCHER_TYPE_ATTR) != null) &#123;</div><div class="line">            dispatcher = (DispatcherType) request.getAttribute(DISPATCHER_TYPE_ATTR);</div><div class="line">        &#125;</div><div class="line">        String requestPath = null;</div><div class="line">        Object attribute = request.getAttribute(DISPATCHER_REQUEST_PATH_ATTR);</div><div class="line">        </div><div class="line">        if (attribute != null)&#123;</div><div class="line">            requestPath = attribute.toString();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // If there is no servlet to execute, return null</div><div class="line">        if (servlet == null)</div><div class="line">            return (null);</div><div class="line"></div><div class="line">        boolean comet = false;</div><div class="line">        </div><div class="line">        // Create and initialize a filter chain object</div><div class="line">        ApplicationFilterChain filterChain = null;</div><div class="line">        if (request instanceof Request) &#123;</div><div class="line">            Request req = (Request) request;</div><div class="line">            comet = req.isComet();</div><div class="line">            if (Globals.IS_SECURITY_ENABLED) &#123;</div><div class="line">                // Security: Do not recycle</div><div class="line">                filterChain = new ApplicationFilterChain();</div><div class="line">                if (comet) &#123;</div><div class="line">                    req.setFilterChain(filterChain);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                filterChain = (ApplicationFilterChain) req.getFilterChain();</div><div class="line">                if (filterChain == null) &#123;</div><div class="line">                    filterChain = new ApplicationFilterChain();</div><div class="line">                    req.setFilterChain(filterChain);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            // Request dispatcher in use</div><div class="line">            filterChain = new ApplicationFilterChain();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        filterChain.setServlet(servlet);</div><div class="line"></div><div class="line">        filterChain.setSupport</div><div class="line">            (((StandardWrapper)wrapper).getInstanceSupport());</div><div class="line"></div><div class="line">        // Acquire the filter mappings for this Context</div><div class="line">        StandardContext context = (StandardContext) wrapper.getParent();</div><div class="line">        FilterMap filterMaps[] = context.findFilterMaps();</div><div class="line"></div><div class="line">        // If there are no filter mappings, we are done</div><div class="line">        if ((filterMaps == null) || (filterMaps.length == 0))</div><div class="line">            return (filterChain);</div><div class="line"></div><div class="line">        // Acquire the information we will need to match filter mappings</div><div class="line">        String servletName = wrapper.getName();</div><div class="line"></div><div class="line">        // Add the relevant path-mapped filters to this filter chain</div><div class="line">        for (int i = 0; i &lt; filterMaps.length; i++) &#123;</div><div class="line">            if (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if (!matchFiltersURL(filterMaps[i], requestPath))</div><div class="line">                continue;</div><div class="line">            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)</div><div class="line">                context.findFilterConfig(filterMaps[i].getFilterName());</div><div class="line">            if (filterConfig == null) &#123;</div><div class="line">                // FIXME - log configuration problem</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            boolean isCometFilter = false;</div><div class="line">            if (comet) &#123;</div><div class="line">                try &#123;</div><div class="line">                    isCometFilter = filterConfig.getFilter() instanceof CometFilter;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    // Note: The try catch is there because getFilter has a lot of </div><div class="line">                    // declared exceptions. However, the filter is allocated much</div><div class="line">                    // earlier</div><div class="line">                    Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);</div><div class="line">                    ExceptionUtils.handleThrowable(t);</div><div class="line">                &#125;</div><div class="line">                if (isCometFilter) &#123;</div><div class="line">                    filterChain.addFilter(filterConfig);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                filterChain.addFilter(filterConfig);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Add filters that match on servlet name second</div><div class="line">        for (int i = 0; i &lt; filterMaps.length; i++) &#123;</div><div class="line">            if (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if (!matchFiltersServlet(filterMaps[i], servletName))</div><div class="line">                continue;</div><div class="line">            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig)</div><div class="line">                context.findFilterConfig(filterMaps[i].getFilterName());</div><div class="line">            if (filterConfig == null) &#123;</div><div class="line">                // FIXME - log configuration problem</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            boolean isCometFilter = false;</div><div class="line">            if (comet) &#123;</div><div class="line">                try &#123;</div><div class="line">                    isCometFilter = filterConfig.getFilter() instanceof CometFilter;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    // Note: The try catch is there because getFilter has a lot of </div><div class="line">                    // declared exceptions. However, the filter is allocated much</div><div class="line">                    // earlier</div><div class="line">                &#125;</div><div class="line">                if (isCometFilter) &#123;</div><div class="line">                    filterChain.addFilter(filterConfig);</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                filterChain.addFilter(filterConfig);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Return the completed filter chain</div><div class="line">        return (filterChain);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　可以将如上代码分为两段，51行之前为第一段，51行之后为第二段。</p>
<p>　　第一段的主要目的是创建ApplicationFilterChain对象以及一些参数设置。</p>
<p>　　第二段的主要目的是从上下文中获取所有Filter信息，之后使用for循环遍历并调用filterChain.addFilter(filterConfig);将filterConfig放入ApplicationFilterChain对象的ApplicationFilterConfig数组中。</p>
<p>　　那ApplicationFilterFactory类的createFilterChain()方法又是在什么地方被调用的呢？<br>是在StandardWrapperValue类的invoke()方法中被调用的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/331652-e88a1f2dc594974c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>由于invoke()方法较长，所以将很多地方省略。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public final void invoke(Request request, Response response)</div><div class="line">        throws IOException, ServletException &#123;</div><div class="line">   ...省略中间代码</div><div class="line">　　　　 // Create the filter chain for this request</div><div class="line">        ApplicationFilterFactory factory =</div><div class="line">            ApplicationFilterFactory.getInstance();</div><div class="line">        ApplicationFilterChain filterChain =</div><div class="line">            factory.createFilterChain(request, wrapper, servlet);</div><div class="line">　　...省略中间代码</div><div class="line">         filterChain.doFilter(request.getRequest(), response.getResponse());</div><div class="line">　　...省略中间代码</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>那正常的流程应该是这样的：</p>
<p>　　在StandardWrapperValue类的invoke()方法中调用ApplicationFilterChai类的createFilterChain()方法———&gt;在ApplicationFilterChai类的createFilterChain()方法中调用ApplicationFilterChain类的addFilter()方法———&gt;在ApplicationFilterChain类的addFilter()方法中给ApplicationFilterConfig数组赋值。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/331652-d154e450c25ed053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>　　根据上面的代码可以看出StandardWrapperValue类的invoke()方法在执行完createFilterChain()方法后，会继续执行ApplicationFilterChain类的doFilter()方法，然后在doFilter()方法中会调用internalDoFilter()方法。</p>
<p>　　以下是internalDoFilter()方法的部分代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// Call the next filter if there is one</div><div class="line">        if (pos &lt; n) &#123;</div><div class="line">　　　　　　　//拿到下一个Filter，将指针向下移动一位</div><div class="line">            //pos它来标识当前ApplicationFilterChain（当前过滤器链）执行到哪个过滤器</div><div class="line">            ApplicationFilterConfig filterConfig = filters[pos++];</div><div class="line">            Filter filter = null;</div><div class="line">            try &#123;</div><div class="line">　　　　　　　　　 //获取当前指向的Filter的实例</div><div class="line">                filter = filterConfig.getFilter();</div><div class="line">                support.fireInstanceEvent(InstanceEvent.BEFORE_FILTER_EVENT,</div><div class="line">                                          filter, request, response);</div><div class="line">                </div><div class="line">                if (request.isAsyncSupported() &amp;&amp; &quot;false&quot;.equalsIgnoreCase(</div><div class="line">                        filterConfig.getFilterDef().getAsyncSupported())) &#123;</div><div class="line">                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,</div><div class="line">                            Boolean.FALSE);</div><div class="line">                &#125;</div><div class="line">                if( Globals.IS_SECURITY_ENABLED ) &#123;</div><div class="line">                    final ServletRequest req = request;</div><div class="line">                    final ServletResponse res = response;</div><div class="line">                    Principal principal = </div><div class="line">                        ((HttpServletRequest) req).getUserPrincipal();</div><div class="line"></div><div class="line">                    Object[] args = new Object[]&#123;req, res, this&#125;;</div><div class="line">                    SecurityUtil.doAsPrivilege</div><div class="line">                        (&quot;doFilter&quot;, filter, classType, args, principal);</div><div class="line">                    </div><div class="line">                &#125; else &#123;</div><div class="line">　　　　　　　　　　　　//调用Filter的doFilter()方法  </div><div class="line">                    filter.doFilter(request, response, this);</div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<p>　　这里的filter.doFilter(request, response, this);就是调用我们前面创建的TestFilter中的doFilter()方法。而TestFilter中的doFilter()方法会继续调用chain.doFilter(request, response);方法，而这个chain其实就是ApplicationFilterChain,所以调用过程又回到了上面调用dofilter和调用internalDoFilter方法，这样执行直到里面的过滤器全部执行。</p>
<p>　　如果定义两个过滤器，则Debug结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/331652-d2b6a199504853e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[立体按钮]]></title>
      <url>https://lijunyu.github.io/2017/03/27/%E7%AB%8B%E4%BD%93%E6%8C%89%E9%92%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>成果如下：<br><img src="/2017/03/27/立体按钮/立体按钮.jpg" alt=""><br>教程来自<a href="http://weibo.com/ttarticle/p/show?id=2309404058434013135929#_0" target="_blank" rel="external">@小胡舵主</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[波浪渐变]]></title>
      <url>https://lijunyu.github.io/2017/03/25/%E6%B3%A2%E6%B5%AA%E6%B8%90%E5%8F%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>我做的效果先看一下，哈哈哈哈！<br><img src="/2017/03/25/波浪渐变/波浪渐变.jpg" alt=""><br>教程来自<a href="http://weibo.com/2426733953/EAFG02EKF?type=comment#_rnd1490450263677" target="_blank" rel="external">@如如酱w</a><br><img src="/2017/03/25/波浪渐变/1.png" alt=""><br><img src="/2017/03/25/波浪渐变/2.png" alt=""><br><img src="/2017/03/25/波浪渐变/3.png" alt=""><br><img src="/2017/03/25/波浪渐变/4.png" alt=""><br><img src="/2017/03/25/波浪渐变/5.png" alt=""><br><img src="/2017/03/25/波浪渐变/6.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3D线性球体]]></title>
      <url>https://lijunyu.github.io/2017/03/24/3D%E7%BA%BF%E6%80%A7%E7%90%83%E4%BD%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>还是先看效果！<br><img src="/2017/03/24/3D线性球体/3D线性球体.jpg" alt=""><br><img src="/2017/03/24/3D线性球体/3D线性球体2.jpg" alt=""><br>教程来自<a href="http://weibo.com/5435570920/EBitd53g1?type=comment#_rnd1490370658953" target="_blank" rel="external">@祝家老司机</a><br><img src="/2017/03/24/3D线性球体/1.png" alt=""><br><img src="/2017/03/24/3D线性球体/2.png" alt=""><br><img src="/2017/03/24/3D线性球体/3.png" alt=""><br><img src="/2017/03/24/3D线性球体/4.png" alt=""><br><img src="/2017/03/24/3D线性球体/5.png" alt=""><br><img src="/2017/03/24/3D线性球体/6.png" alt=""><br><img src="/2017/03/24/3D线性球体/7.png" alt=""><br><img src="/2017/03/24/3D线性球体/8.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL设置不区分大小写]]></title>
      <url>https://lijunyu.github.io/2017/03/24/MySQL%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>MySQL数据库的表名在Linux系统下是严格区分大小写的，在Windows系统下开发的程序移植到Linux系统下，如果程序中SQL语句没有严格按照大小写访问数据库表，就可能会出现找不到表的错误。</p>
<p>解决办法是：修改MySQL的配置文件my.cnf，在[mysqld]部分添加如下配置选项<code>lower_case_table_names = 1</code>，重启MySQL服务即可。</p>
<h3 id="MySQL-5-7以前的版本的修改"><a href="#MySQL-5-7以前的版本的修改" class="headerlink" title="MySQL 5.7以前的版本的修改"></a>MySQL 5.7以前的版本的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  vi　/etc/MySQL/my.cnf</div></pre></td></tr></table></figure>
<p>在[mysql]</p>
<p>下添加一行</p>
<p>lower_case_table_names=1</p>
<h3 id="MySQL-5-7设置不区分大小写"><a href="#MySQL-5-7设置不区分大小写" class="headerlink" title="MySQL 5.7设置不区分大小写"></a>MySQL 5.7设置不区分大小写</h3><p>MySQL 5.7版本的修改则在<code>/etc/mysql/my.cnf</code>这个目录下。</p>
<p>验证是否修改成功，如果value为1则不区分大小写了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;%case_table%&apos;;</div><div class="line"> +------------------------+-------+</div><div class="line"> | Variable_name          | Value |</div><div class="line"> +------------------------+-------+</div><div class="line"> | lower_case_table_names | 1    |</div><div class="line"> +------------------------+-------+</div><div class="line"> 1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>但这个办法治标不治本，根本的解决办法还是要遵从跨平台开发的规范，例如SQL语句中的库名、表名、字段名等等要严格区分大小写，与数据库中的库名、表名、字段名的大小写完全匹配上，这样就会增强程序的可移植性。避免修改部署目标环境的配置，如果目标环境部署了其它的应用，就可能会造成其它应用不起作用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[渐变效果]]></title>
      <url>https://lijunyu.github.io/2017/03/23/%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>看效果先！<br><img src="/2017/03/23/渐变效果/渐变效果.jpg" alt=""><br>教程来自 <a href="http://weibo.com/5288483681/EAOwZaITL?type=comment#_rnd1490275793838" target="_blank" rel="external">@Nicolesloves</a><br><img src="/2017/03/23/渐变效果/1.png" alt=""><br><img src="/2017/03/23/渐变效果/2.png" alt=""><br><img src="/2017/03/23/渐变效果/3.png" alt=""><br><img src="/2017/03/23/渐变效果/4.png" alt=""><br><img src="/2017/03/23/渐变效果/5.png" alt=""><br><img src="/2017/03/23/渐变效果/6.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[渐变字效果]]></title>
      <url>https://lijunyu.github.io/2017/03/18/%E6%B8%90%E5%8F%98%E5%AD%97%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>先给大家看看效果！！！<br><img src="/2017/03/18/渐变字效果/渐变字.jpg" alt=""></p>
<p>教程来自 <a href="http://weibo.com/2124622522/EzDOGo3pQ" target="_blank" rel="external">@安全蛋</a></p>
<p><img src="/2017/03/18/渐变字效果/1.png" alt=""><br><img src="/2017/03/18/渐变字效果/2.png" alt=""><br><img src="/2017/03/18/渐变字效果/3.png" alt=""><br><img src="/2017/03/18/渐变字效果/4.png" alt=""><br><img src="/2017/03/18/渐变字效果/5.png" alt=""><br><img src="/2017/03/18/渐变字效果/6.png" alt=""><br><img src="/2017/03/18/渐变字效果/7.png" alt=""><br><img src="/2017/03/18/渐变字效果/8.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3D极简主义字效]]></title>
      <url>https://lijunyu.github.io/2017/03/17/3D%E6%9E%81%E7%AE%80%E9%A3%8E%E6%A0%BC%E5%AD%97%E6%95%88/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>先给大家看看效果！！！<br><img src="/2017/03/17/3D极简风格字效/3D极简主义字效的副本.jpg" alt=""></p>
<p>教程来自 <a href="http://weibo.com/u/5435570920" target="_blank" rel="external">@祝家老司机</a></p>
<p><img src="/2017/03/17/3D极简风格字效/1.png" alt=""><br><img src="/2017/03/17/3D极简风格字效/2.png" alt=""><br><img src="/2017/03/17/3D极简风格字效/3.png" alt=""><br><img src="/2017/03/17/3D极简风格字效/4.png" alt=""><br><img src="/2017/03/17/3D极简风格字效/5.png" alt=""><br><img src="/2017/03/17/3D极简风格字效/6.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[潘洛斯三角]]></title>
      <url>https://lijunyu.github.io/2017/03/15/%E6%BD%98%E6%B4%9B%E6%96%AF%E4%B8%89%E8%A7%92/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p><a href="http://t.cn/RimegtT" target="_blank" rel="external">快速制作炫酷的潘洛斯三角</a></p>
<p><img src="/2017/03/15/潘洛斯三角/红.jpg" alt=""><br><img src="/2017/03/15/潘洛斯三角/橘黄色.jpg" alt=""><br><img src="/2017/03/15/潘洛斯三角/蓝绿.jpg" alt=""><br><img src="/2017/03/15/潘洛斯三角/蓝色.jpg" alt=""><br><img src="/2017/03/15/潘洛斯三角/亮蓝.jpg" alt=""></p>
<p>教程来自 <a href="http://weibo.com/5435570920/EzCNSp3B5?type=comment#_rnd1489851695909" target="_blank" rel="external">@祝家老司机</a></p>
<p><img src="/2017/03/15/潘洛斯三角/1.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/2.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/3.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/4.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/5.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/6.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/7.png" alt=""><br><img src="/2017/03/15/潘洛斯三角/8.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端必备]]></title>
      <url>https://lijunyu.github.io/2017/03/11/webDeveloperessential/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><h2 id="来自优秀网页设计的推荐"><a href="#来自优秀网页设计的推荐" class="headerlink" title="来自优秀网页设计的推荐"></a>来自优秀网页设计的推荐</h2><p><a href="http://bttn.surge.sh" target="_blank" rel="external">轻松实现精美按钮 bttn.surge.sh</a><br><a href="http://land-book.com" target="_blank" rel="external">网页设计灵感库 land-book.com</a><br><a href="http://theapplaunchpad.com" target="_blank" rel="external">App免费截图制作 theapplaunchpad.com</a><br><a href="http://collectui.com" target="_blank" rel="external">UI设计灵感图 collectui.com</a><br><a href="http://httpster.net" target="_blank" rel="external">网页设计灵感站 httpster.net</a><br><a href="http://quotleapp.com/pikka/" target="_blank" rel="external">色彩管理工具 quotleapp.com/pikka/</a><br><a href="http://appanimations.com" target="_blank" rel="external">动效灵感库 appanimations.com</a><br><a href="http://talkaboutdesign.com" target="_blank" rel="external">灵感库 talkaboutdesign.com</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[光影的艺术]]></title>
      <url>https://lijunyu.github.io/2017/03/11/%E5%85%89%E5%BD%B1%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p><a href="http://t.cn/RildA8G" target="_blank" rel="external">如何快速制作超火的几何发光效果</a></p>
<p><img src="/2017/03/11/光影的艺术/light1.gif" alt=""><br><img src="/2017/03/11/光影的艺术/light2.gif" alt=""><br><img src="/2017/03/11/光影的艺术/light3.gif" alt=""><br><img src="/2017/03/11/光影的艺术/light4.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高清图库分享]]></title>
      <url>https://lijunyu.github.io/2017/03/10/%E9%AB%98%E6%B8%85%E5%9B%BE%E5%BA%93%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>你有没有想找一张美图，好不容易找到了，告诉你请付款，或者请买什么豆什么币兑换？<br>哈哈哈<br>我给大家带来了几个干货，保证你会爱上我，不对，是爱上这几个高清图库素材站！</p>
<h3 id="No-1-Pexels"><a href="#No-1-Pexels" class="headerlink" title="No.1 Pexels"></a>No.1 <a href="https://www.pexels.com" target="_blank" rel="external">Pexels</a></h3><p><img src="/2017/03/10/高清图库分享/WX20170310-105746@2x.png" alt=""><br><img src="/2017/03/10/高清图库分享/WX20170310-105819@2x.png" alt=""></p>
<h3 id="NO-2-Unsplash"><a href="#NO-2-Unsplash" class="headerlink" title="NO.2 Unsplash"></a>NO.2 <a href="https://unsplash.com" target="_blank" rel="external">Unsplash</a></h3><p><img src="/2017/03/10/高清图库分享/WX20170310-105629@2x.png" alt=""><br><img src="/2017/03/10/高清图库分享/WX20170310-105656@2x.png" alt=""></p>
<h3 id="No-3-Librestock"><a href="#No-3-Librestock" class="headerlink" title="No.3 Librestock"></a>No.3 <a href="http://librestock.com" target="_blank" rel="external">Librestock</a></h3><p><img src="/2017/03/10/高清图库分享/WX20170310-105706@2x.png" alt=""><br><img src="/2017/03/10/高清图库分享/WX20170310-105719@2x.png" alt=""></p>
<p>在美图面前，一切文字都是废话！Enjoy！<br><strong>根据心情，不定期更新……</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[嘿，兄弟！]]></title>
      <url>https://lijunyu.github.io/2017/03/02/hibrother/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><blockquote>
<p>时间不会因为你不想走，就停止，它会从你身上碾压过去，毫不留情。</p>
</blockquote>
<p>腾讯出了一款新版的QQ叫TIM，第一时间分享给了好基友，今天装到到电脑上体验了一下，翻聊天记录发现了一件很神奇的事情。从2011年我买了电脑就没有重装过系统，内存条从2G升到8G，系统从win7升级到win8再升级到win10，聊天记录竟默默的被保存了下来，直到现在…</p>
<p>就像开头说的，我们多数聊天内容都是技术，对，肯定是这样的，没有错，应该是，或许是吧….</p>
<p>好吧，当然有生活，有工作，还有人生。</p>
<p>我属于那种，能不麻烦别人就不麻烦别人，有苦有难，自己一个人扛的那种，也不喜欢让别人帮忙，怕给别人添麻烦。给你们举个栗子🌰，大家来看，这个栗子呢，它属于坚果，外壳坚硬，但里面是又大又甜的栗子肉…咳咳咳，跑远了，说正题。小时候有一次考试，没有橡皮，但是自己又写错很多字，最后愣是没好意思借别人的，自己用手指头给涂了，那叫一个惨，错一个涂一下，最后老师问我，你这是画画呢？后来我就自己买了N个橡皮。别人来借，我就给别人，多数都有去无回，但是我没有任何抱怨，那时候就喜欢给别人，不喜欢冲别人要。书也是，看到别人看好看的书，我也想看，但是就是不好意思找别人借，总觉得耽误别人看，会给别人带来麻烦，所以我就自己买，看完之后，就借给别人了，也是有去无回…</p>
<p>但是他不一样，有问题就来问我，技术啊，生活啊，人生啊，连电脑壁纸看烦了想换，没有新歌听了想换歌都来找我，但是我从来不觉得麻烦，还很享受…</p>
<p>我从他那里学会了，一个道理。其实人和人之间的关系就是靠互相麻烦得来的，互相麻烦的次数越多，两个人的人生轨迹交集就觉多，牵绊就越多。我以前总觉得，以前的好朋友，一辈子都是好朋友，见了面瞬间就能回到原来的状态，但是随着时间的推移，发现完全不是，总是不联系，真的就没联系了。</p>
<p>他打算回家发展从北京走的时候，应该我是最后一个知道的，某一天他想把这一切告诉我了，我们聊了很久，他说<code>其实，要不是因为你，我感觉我会走的义无反顾，但是一想到你，怎么感觉我都不知道了</code>，听他说完这句话，我心里默默的想，一辈子有这样的朋友知足了。</p>
<p>我都不知道什么时候，关系变得那么好，有一段时间，大家看到我会问他在哪儿，因为他们知道我肯定知道他的踪迹。现在也是，工作这么多年了，别人还是会问他怎么样了，因为他们知道，我肯定知道他现在状况。</p>
<p>我刚才翻了一下13年路过福州找他玩的时候的照片，这么多年过去了，现在他的孩子都要上幼儿园了，他还没怎么变，还是照片上那个阳光帅气少年的模样。不像我，已经变的自己都不认识自己了，我告诉他，鬼知道我经历了什么，哈哈哈。</p>
<p>翻着聊天的记录的日历表，突然好想知道那些时间戳是不是能发现点什么。</p>
<p><img src="/2017/03/02/hibrother/hibrother.jpg" alt=""></p>
<p>看了这张图，真的发现，越往后，聊天的次数越少，但是总算没有断。</p>
<p>如今，他已成家，还当了爹，替他高兴。随之时间的推移，有些变了，有些没变。</p>
<p>我突然想起了一首歌</p>
<div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: "好久不见",
					author: "李小龙",
					url: "/media/李小龙 - 好久不见.mp3",
					pic: "",
				}
			});
		</script>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">嘿，兄弟！我们好久不见你在哪里   </div><div class="line">嘿，朋友，如果真的是你，请打招呼！   </div><div class="line">嘿，兄弟！我们好久不见你在哪里   </div><div class="line">嘿，朋友，如果真的是你，请打招呼！   </div><div class="line">别对着我笑,没人会在乎   </div><div class="line">别对着我哭,没人会无助   </div><div class="line">其实大家早已经清清楚楚   </div><div class="line">脚下踏上了不回头的路   </div><div class="line">我说好久不见你去何处   </div><div class="line">你却对我说，我去江湖   </div><div class="line">恩恩怨怨，没人会认输   </div><div class="line">舞刀弄剑,一点都不酷   </div><div class="line">来吧,热上一壶好酒   </div><div class="line">说吧,要说原来的辛苦   </div><div class="line">难得知已,聪明又糊涂       </div><div class="line">儿女情长,牵肠又挂肚   </div><div class="line">你我更需要忍受孤独   </div><div class="line">独来独往,英雄没有出处   </div><div class="line">笑一笑朋友,快乐会无数   </div><div class="line">喝完了这壶让我们上路   </div><div class="line">嘿，兄弟！嘿，朋友!   </div><div class="line">嘿，兄弟！我们好久不见你在哪里   </div><div class="line">嘿，朋友，如果真的是你，请打招呼！   </div><div class="line">嘿，兄弟！我们好久不见你在哪里   </div><div class="line">嘿，朋友，如果真的是你，请打招呼！</div></pre></td></tr></table></figure>
<p>【他写的】<a href="http://www.cnblogs.com/jager/p/6489408.html" target="_blank" rel="external">瞎扯淡</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬取花瓣网精美图片]]></title>
      <url>https://lijunyu.github.io/2017/03/01/DigHuabanPicByPython/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> urllib, urllib2, re, sys, os, requests</div><div class="line"></div><div class="line">path = <span class="string">r"/Users/lijunyu/PycharmProjects/Dig/手机壁纸"</span></div><div class="line">url = <span class="string">'http://huaban.com/explore/chengshijianzhubizhi/'</span></div><div class="line">i_headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.71 Safari/537.36"</span>&#125;</div><div class="line">count = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">#### 获取网页源码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">    page = urllib.urlopen(url)</div><div class="line">    html = page.read().decode(<span class="string">'utf-8'</span>)  <span class="comment"># 需要解码</span></div><div class="line">    <span class="keyword">return</span> html</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlHandle</span><span class="params">(url)</span>:</span></div><div class="line">    req = urllib2.Request(url, headers=i_headers)</div><div class="line">    html = urllib2.urlopen(req).read()</div><div class="line">    <span class="comment"># print html</span></div><div class="line">    reg = re.compile(<span class="string">r'"pin_id":(\d+),.+?"file":&#123;"id":(\d+), "farm":"farm1", "bucket":"hbimg",.+?"key":"(.*?)",.+?"type":"image/(.*?)"'</span>, re.S)</div><div class="line">    groups = re.findall(reg, html)</div><div class="line">    <span class="keyword">print</span> groups.__len__()</div><div class="line">    <span class="keyword">return</span> groups</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">imgHandle</span><span class="params">(groups)</span>:</span></div><div class="line">    <span class="keyword">if</span> groups:</div><div class="line">        <span class="keyword">for</span> att <span class="keyword">in</span> groups:</div><div class="line">            pin_id = att[<span class="number">0</span>]</div><div class="line">            <span class="comment">#### 获取跳转网页网址</span></div><div class="line">            url_str = <span class="string">r'http://huaban.com/pins/%s/'</span> % pin_id</div><div class="line">            <span class="comment">#### 获取点击图片时弹出网页的源码</span></div><div class="line">            pin_id_source = getHtml(url_str)</div><div class="line">            <span class="comment">#### 解析源码，获取原图片的网址</span></div><div class="line">            img_url_re = re.compile(<span class="string">'main-image.*?src="(.*?)"'</span>, re.S)</div><div class="line">            img_url_list = re.findall(img_url_re, pin_id_source)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                img_url = <span class="string">'http:'</span> + img_url_list[<span class="number">0</span>]</div><div class="line">                <span class="keyword">print</span> img_url</div><div class="line">                <span class="comment">#### 获取原图片的网址，以_fw658结尾的链接并不是原图片的链接，需要把_fw658去掉</span></div><div class="line">                <span class="keyword">if</span> <span class="string">'_fw658'</span> <span class="keyword">in</span> img_url:</div><div class="line">                    img_url = img_url[:<span class="number">-6</span>]</div><div class="line">                urllib.urlretrieve(img_url, <span class="string">'手机壁纸%s.jpg'</span> % pin_id)</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                <span class="comment"># print("获取图片：%s失败，跳过，获取下一张。" % img_url)</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="comment"># print("获取：%s成功！" % img_url)</span></div><div class="line"></div><div class="line">groups = urlHandle(url)</div><div class="line">imgHandle(groups)</div><div class="line"></div><div class="line"><span class="keyword">while</span> (groups):</div><div class="line">    count += <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> count</div><div class="line">    pin_id = groups[<span class="number">-1</span>][<span class="number">0</span>]</div><div class="line">    <span class="keyword">print</span> pin_id</div><div class="line">    urltemp = url + <span class="string">'/?max='</span> + str(pin_id) + <span class="string">'&amp;limit='</span> + str(<span class="number">20</span>) + <span class="string">'&amp;wfl=1'</span></div><div class="line">    print(urltemp)</div><div class="line">    groups = urlHandle(urltemp)</div><div class="line">    <span class="comment"># print groups</span></div><div class="line">    imgHandle(groups)</div></pre></td></tr></table></figure>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p><a href="http://blog.csdn.net/oxiangduinishuo1/article/details/52219768" target="_blank" rel="external">Python爬花瓣网图片</a><br><a href="http://www.oschina.net/code/snippet_582976_51631" target="_blank" rel="external">爬取花瓣网美女图片</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在hexo中无痛使用本地图片]]></title>
      <url>https://lijunyu.github.io/2017/03/01/%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E7%97%9B%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>
<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>
<p>hexo 下插入图片现在大概有几个方案</p>
<h3 id="1-1-放在根目录"><a href="#1-1-放在根目录" class="headerlink" title="1.1 放在根目录"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code>。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>
<h3 id="1-2-asset-image"><a href="#1-2-asset-image" class="headerlink" title="1.2 asset-image"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">资源文件夹 | Hexo</a> 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>
<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">CodeFalling/hexo-asset-image</a></p>
<h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>
<p>在 hexo 目录，执行</p>
<p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<p>假设在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MacGesture2-Publish</div><div class="line">├── apppicker.jpg</div><div class="line">├── logo.jpg</div><div class="line">└── rules.jpg</div></pre></td></tr></table></figure>
<p>MacGesture2-Publish.md<br>这样的目录结构（目录名和文章名一致），只要使用 ![logo](MacGesture2-Publish/logo.jpg) 就可以插入图片。</p>
<p>生成的结构为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public/2015/10/18/MacGesture2-Publish</div><div class="line">├── apppicker.jpg</div><div class="line">├── index.html</div><div class="line">├── logo.jpg</div><div class="line">└── rules.jpg</div></pre></td></tr></table></figure>
<p>同时，生成的 html 是</p>
<p><code>&lt;img src=&quot;/2015/10/18/MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</code></p>
<p>而不是愚蠢的<br><code>&lt;img src=&quot;MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</code></p>
<p>值得一提的是，这个插件对于 <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">CodeFalling/hexo-renderer-org</a> 同样有效。</p>
<p><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">【转】在hexo中无痛使用本地图片</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何用Java进行3DES加密解]]></title>
      <url>https://lijunyu.github.io/2017/03/01/%20%E5%A6%82%E4%BD%95%E7%94%A8Java%E8%BF%9B%E8%A1%8C3DES%E5%8A%A0%E5%AF%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>原文地址 : <a href="http://weavesky.com/2008/01/05/java-3des/" target="_blank" rel="external">http://weavesky.com/2008/01/05/java-3des/</a></p>
<p>最近一个合作商提出使用3DES交换数据，本来他们有现成的代码，可惜只有.net版本，我们的服务器都是Linux，而且应用都是Java。于是对照他们提供的代码改了一个Java的版本出来，主要是不熟悉3DES，折腾了一天，终于搞定。</p>
<p>所谓3DES，就是把DES做三次，当然不是简单地DES DES DES就行了，中途有些特定的排列。这个我可不关心，呵呵，我的目的是使用它。</p>
<p>在网上搜索了一下3DES，找到很少资料。经过朋友介绍，找到GNU Crypto和Bouncy Castle两个Java扩充包，里面应该有3DES的实现吧。</p>
<p>从GNU Crypto入手，找到一个TripleDES的实现类，发现原来3DES还有一个名字叫DESede，在网上搜索TripleDES和DESede，呵呵，终于发现更多的资料了。</p>
<p>Java的安全API始终那么难用，先创建一个cipher看看算法在不在吧</p>
<pre><code>Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
</code></pre><p>如果没有抛异常的话，就证明这个算法是有效的</p>
<p>突然想看看JDK有没有内置DESede，于是撇开Crypto，直接测试，发现可以正确运行。在jce.jar里面找到相关的类，JDK内置了。</p>
<p>于是直接用DES的代码来改&amp;测试，最后代码变成这样</p>
<pre><code>SecureRandom sr = new SecureRandom();
DESedeKeySpec dks = new DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DESede&quot;);
SecretKey securekey = keyFactory.generateSecret(dks);
Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);
return new String(Hex.encodeHex(cipher.doFinal(str.getBytes())));
</code></pre><p>需要留意的是，要使用DESede的Spec、Factory和Cipher才行</p>
<p>事情还没完结，合作商给过来的除了密钥之外，还有一个IV向量。搜索了一下，发现有一个IvParameterSpec类，于是代码变成这样</p>
<pre><code>SecureRandom sr = new SecureRandom();
DESedeKeySpec dks = new DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DESede&quot;);
SecretKey securekey = keyFactory.generateSecret(dks);
IvParameterSpec iv = new IvParameterSpec(PASSWORD_IV.getBytes());
Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
cipher.init(Cipher.ENCRYPT_MODE, securekey, iv, sr);
return new String(Hex.encodeHex(cipher.doFinal(str.getBytes())));
</code></pre><p>但是，运行报错了</p>
<pre><code>java.security.InvalidAlgorithmParameterException: ECB mode cannot use IV
</code></pre><p>ECB是什么呢？我的代码完全没有写ECB什么的</p>
<p>又上网搜索，结果把DES的来龙去脉都搞清楚了</p>
<p><a href="http://www.tropsoft.com/strongenc/des.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des.htm</a></p>
<p>ECB是其中一种字串分割方式，除了DES以外，其他加密方式也会使用这种分割方式的，而Java默认产生的DES算法就是用ECB方法，ECB不需要向量，当然也就不支持向量了</p>
<p>除了ECB，DES还支持CBC、CFB、OFB，而3DES只支持ECB和CBC两种</p>
<p><a href="http://www.tropsoft.com/strongenc/des3.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des3.htm</a></p>
<p>CBC支持并且必须有向量，具体算法这里就不说了。合作商给的.net代码没有声明CBC模式，似乎是.net默认的方式就是CBC的</p>
<p>于是把模式改成CBC</p>
<pre><code>Cipher cipher = Cipher.getInstance(&quot;DESede/CBC/PKCS5Padding&quot;);
</code></pre><p>成功运行了</p>
<p>后话：</p>
<p>搜索的过程中，找到一个不错的讨论</p>
<p><a href="http://www.lslnet.com/linux/dosc1/21/linux-197579.htm" target="_blank" rel="external">http://www.lslnet.com/linux/dosc1/21/linux-197579.htm</a> 在CBC（不光是DES算法）模式下，iv通过随机数（或伪随机）机制产生是一种比较常见的方法。iv的作用主要是用于产生密文的第一个block，以使最终生成的密文产生差异（明文相同的情况下），使密码攻击变得更为困难，除此之外iv并无其它用途。因此iv通过随机方式产生是一种十分简便、有效的途径。此外，在IPsec中采用了DES-CBC作为缺省的加密方式，其使用的iv是通讯包的时间戳。从原理上来说，这与随机数机制并无二致。</p>
<p>看来，向量的作用其实就是salt</p>
<p>最大的好处是，可以令到即使相同的明文，相同的密钥，能产生不同的密文</p>
<p>例如，我们用DES方式在数据保存用户密码的时候，可以另外增加一列，把向量同时保存下来，并且每次用不同的向量。这样的好处是，即使两个用户的密码是一样的，数据库保存的密文，也会不一样，就能降低猜测的可能性</p>
<p>另外一种用法，就是类似IPsec的做法，两部主机互传数据，保证两部机的时钟同步的前提下（可以取样到分钟或更高的单位避免偏差），用时钟的变化值作为向量，就能增加被sniffer数据的解密难度</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac IDEA get set 快捷键]]></title>
      <url>https://lijunyu.github.io/2017/02/22/get%20set%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OSX: command+n</div><div class="line">Windows: alt+insert</div></pre></td></tr></table></figure>
<p><img src="/2017/02/22/get set 快捷键/14830646741087.jpg" alt="14830646741087"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IDEA JSP往后台Action传值中文乱码的问题]]></title>
      <url>https://lijunyu.github.io/2017/02/22/JSP%E5%BE%80%E5%90%8E%E5%8F%B0Action%E4%BC%A0%E5%80%BC%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>在tomcat的<strong>conf/server.xml</strong>中找到<strong>Connector</strong>标签，添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">URIEncoding=&quot;UTF-8&quot;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决idea控制台中文乱码]]></title>
      <url>https://lijunyu.github.io/2017/02/22/%E8%A7%A3%E5%86%B3idea%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dfile.encoding=UTF-8</div></pre></td></tr></table></figure>
<p><img src="/2017/02/22/解决idea控制台中文乱码/14824587460988.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac上搭建基于GitHub、Coding的Hexo博客]]></title>
      <url>https://lijunyu.github.io/2017/02/07/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>站在各位大牛的肩膀上，终于搭建了自己博客，我把坑填上了，你们可以踩着我过去了。。。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>官网上很详细，而且还是中文啊，有木有！！！能看懂的，就别听我在这儿瞎逼逼了，举高高双手奉上<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官网帮助文档</a></p>
<h3 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h3><p>什么？你说你电脑上没有装Git？OMG，竟然还有人电脑上没有装Git？！好吧，那我告诉你你怎么装！<br>请移步到我的另外一片文章<a href="https://lijunyu.coding.me/2017/03/01/Homebrew/" target="_blank" rel="external">让Mac安装软件超级方便的Homebrew</a>，看完了之后不要告诉我你不会装git</p>
<h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><p>上面的都会了，这个跟上面一样的啦。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>环境搭好了之后就可以开始安装Hexo了，命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>输入管理员密码（Mac登录密码）即开始安装 (<code>sudo</code>:linux系统管理指令  <code>-g</code>:全局安装)</p>
<blockquote>
<p>注意坑一：Hexo官网上的安装命令是<code>$ npm install -g hexo-cli</code>，安装时不要忘记前面加上sudo，否则会因为权限问题报错。</p>
</blockquote>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>终端cd到一个你选定的目录，执行<code>hexo init</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>blog是你建立的文件夹名称。cd到<code>blog</code>文件夹下，执行如下命令，安装npm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>执行如下命令，开启hexo服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>此时，浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，能看到如下页面：<br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/985173-6538ff6c494aeb9d.png" alt=""><br>看到这个页面，是不是觉得自己很帅！</p>
<h2 id="关联Github、Coding"><a href="#关联Github、Coding" class="headerlink" title="关联Github、Coding"></a>关联Github、Coding</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h4><p>登录你的Github帐号，新建仓库，名为<code>用户名.github.io</code>固定写法，如<code>lijunyu.github.io</code>即下图中所示：<br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/14883489742929.jpg" alt=""></p>
<p>本地的blog文件夹下内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_config.yml    </div><div class="line">db.json </div><div class="line">node_modules </div><div class="line">package.json</div><div class="line">scaffolds</div><div class="line">source</div><div class="line">themes</div></pre></td></tr></table></figure>
<p>终端cd到<code>blog</code>文件夹下，<code>vim</code>打开<code>_config.yml</code>，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim _config.yml</div></pre></td></tr></table></figure>
<p>打开后往下滑到最后，修改成下边的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: https://github.com/lijunyu/lijunyu.github.io</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<p>你需要将<code>repository</code>后<code>lijunyu</code>换成你自己的用户名，地址在上图红框的位置获取。hexo 3.1.1版本后<code>type:</code>值为<code>git</code>。</p>
<blockquote>
<p>注意坑二：在配置所有的<code>_config.yml</code>文件时（包括theme中的），在所有的冒号<strong>:</strong>后边都要加一个空格，否则执行hexo命令会报错，切记 切记<br>在blog文件夹目录下执行生成静态页面命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate        或者：hexo g</div></pre></td></tr></table></figure>
<p>此时若出现如下报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found in ~/blog</div><div class="line">ERROR Try runing: &apos;npm install hexo --save&apos;</div><div class="line">则执行命令：</div><div class="line">npm install hexo --save</div><div class="line">若无报错，自行忽略此步骤。</div></pre></td></tr></table></figure>
<p>再执行配置命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy            或者：hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p> 注意坑三：若执行命令<code>hexo deploy</code>仍然报错：无法连接git或找不到git，则执行如下命令来安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</blockquote>
<p>再次执行<code>hexo generate</code>和<code>hexo deploy</code>命令。</p>
<p>若你未关联Github，则执行<code>hexo deploy</code>命令时终端会提示你输入Github的用户名和密码，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Username for &apos;https://github.com&apos;:</div><div class="line">Password for &apos;https://github.com&apos;:</div></pre></td></tr></table></figure>
<p><code>hexo deploy</code>命令执行成功后，浏览器中打开网址<a href="https://lijunyu.github.io">https://lijunyu.github.io</a>（将lijunyu换成你的用户名）能看到和打开<a href="http://localhost:4000时一样的页面。" target="_blank" rel="external">http://localhost:4000时一样的页面。</a></p>
<p><strong>为避免每次输入Github用户名和密码的麻烦，可参照第二节方法</strong></p>
<h4 id="2-添加ssh-key到Github"><a href="#2-添加ssh-key到Github" class="headerlink" title="2. 添加ssh key到Github"></a>2. 添加ssh key到Github</h4><h5 id="2-1-检查SSH-keys是否存在Github"><a href="#2-1-检查SSH-keys是否存在Github" class="headerlink" title="2.1 检查SSH keys是否存在Github"></a>2.1 检查SSH keys是否存在Github</h5><p>执行如下命令，检查SSH keys是否存在。如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code>，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<h5 id="2-2-生成新的ssh-key"><a href="#2-2-生成新的ssh-key" class="headerlink" title="2.2 生成新的ssh key"></a>2.2 生成新的ssh key</h5><p>执行如下命令生成public/private rsa key pair，注意将<code>your_email@example.com</code>换成你自己注册Github的邮箱地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<p>默认会在相应路径下（<code>~/.ssh/id_rsa.pub</code>）生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>
<h5 id="2-3-将ssh-key添加到Github中"><a href="#2-3-将ssh-key添加到Github中" class="headerlink" title="2.3 将ssh key添加到Github中"></a>2.3 将ssh key添加到Github中</h5><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开<code>id_rsa.pub</code>文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">进入Github --&gt; Settings --&gt; SSH keys --&gt; add SSH key:</div></pre></td></tr></table></figure>
<p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p>
<h4 id="3-发布文章"><a href="#3-发布文章" class="headerlink" title="3. 发布文章"></a>3. 发布文章</h4><p>终端cd到<code>blog</code>文件夹下，执行如下命令新建文章：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot;</div></pre></td></tr></table></figure>
<p>名为<code>postName.md</code>的文件会建在目录<code>/blog/source/_posts</code>下。你当然可以用vim来编辑文章。给大家推荐一款Markdown编辑器<a href="http://zh.mweb.im" target="_blank" rel="external">MWeb</a>！</p>
<p>文章编辑完成后，终端cd到<code>blog</code>文件夹下，执行如下命令来发布：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate             //生成静态页面</div><div class="line">hexo deploy            //将文章部署到Github</div></pre></td></tr></table></figure>
<h4 id="4-Page-服务"><a href="#4-Page-服务" class="headerlink" title="4. Page 服务"></a>4. Page 服务</h4><p>打开项目的<code>Settings</code>，然后找到<code>GitHub Pages</code><br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/WX20170301-150149.png" alt=""><br>打开<a href="https://lijunyu.github.io">https://lijunyu.github.io</a>,超级帅，有木有！</p>
<h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>首先到 <a href="https://coding.net" target="_blank" rel="external">Coding</a> 上注册并开一个项目，项目名称和用户个性后缀相同（方便二级域名访问博客），拿到项目的 https 地址</p>
<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h4><p>打开本地 <code>blog</code> 目录下的 <code>_config.yml</code> 文件，修改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: https://github.com/lijunyu/lijunyu.github.io</div><div class="line">    coding: https://git.coding.net/lijunyu/lijunyu.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h4 id="3-Staticfile"><a href="#3-Staticfile" class="headerlink" title="3. Staticfile"></a>3. Staticfile</h4><p>cd 到本地 <code>blog/source</code> 目录下执行如下命令新建 <code>Staticfile</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch Staticfile  #名字必须是Staticfile</div></pre></td></tr></table></figure>
<p>原因是 <code>coding.net</code> 需要以这个文件来作为静态文件部署的标志，就是说看到这个 <code>Staticfile</code> 就知道按照静态文件来发布。</p>
<h4 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h4><p>执行发布命令 <code>hexo g</code> 、 <code>hexo d</code></p>
<h4 id="5-域名解析"><a href="#5-域名解析" class="headerlink" title="5. 域名解析"></a>5. 域名解析</h4><p>个人域名添加两条 <code>CNAME</code> 解析。将 <code>lijunyu.github.io</code> 解析为 [海外] ，将 <code>lijunyu.coding.me</code> 解析为 [默认]</p>
<p>这样就是为了从国内访问就是访问 Coding 上的博客项目，从国外访问就是访问 GitHub 上的博客项目。</p>
<h4 id="6-Page-服务"><a href="#6-Page-服务" class="headerlink" title="6. Page 服务"></a>6. Page 服务</h4><p>到 Coding 上的博客项目主页，点击 <code>Pages服务</code> 输入部署分支 <code>master</code> 立即开启</p>
<p><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/WX20170301-145220.png" alt=""><br>这样就可以访问自己在 Coding 上的个人博客了 <a href="https://lijunyu.coding.me" target="_blank" rel="external">lijunyu.coding.me/lijunyu</a> 如果像这样你的用户后缀名与博客项目名称相同你还可以省略项目名称直接访问 lijunyu.coding.me</p>
<p>至此，Mac上搭建基于Github和Coding的Hexo博客就完成了。</p>
<p>给大家推荐一个超级帅的主题<a href="https://material.viosey.com" target="_blank" rel="external">material</a> ，就是我现在用的这一款啦，超级帅有木有，帅到起飞有木有！！！</p>
<p>【参考文章】 <a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="external">Mac上搭建基于GitHub的Hexo博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让Mac安装软件超级方便的Homebrew]]></title>
      <url>https://lijunyu.github.io/2017/02/06/Homebrew/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p><a href="http://wiki.jikexueyuan.com/project/mac-dev-setup/" target="_blank" rel="external">【转】Mac 开发配置手册</a></p>
<p>包管理工具可以让你安装和更新程序变得更方便，目前在 OS X 系统中最受欢迎的包管理工具是 Homebrew.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装 Homebrew 之前，需要将 Xcode Command Line Tools 安装完成，这样你就可以使用基于 Xcode Command Line Tools 编译的 Homebrew。</p>
<p>在 terminal 中复制以下命令（不包括 $），跟随指引，将完成 Hombrew 安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>紧接着，我们需要做一件事让通过 Hombrew 安装的程序的启动链接 (在 /usr/local/bin 中）可以直接运行，无需将完整路径写出。通过以下命令将 /usr/local/bin 添加至 $PATH 环境变量中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PATH=&quot;/usr/local/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p><strong>Cmd+T</strong> 打开一个新的 terminal 标签页，运行以下命令，确保 brew 运行正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew doctor</div></pre></td></tr></table></figure>
<p>译注：</p>
<p>安装完成后，Homwbrew 会将本地 /usr/local 初始化为 git 的工作树，并将目录所有者变更为当前所操作的用户，将来 brew 的相关操作不需要 sudo 。</p>
<h2 id="Homebrew-基本使用"><a href="#Homebrew-基本使用" class="headerlink" title="Homebrew 基本使用"></a>Homebrew 基本使用</h2><p>安装一个包，可以简单的运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install &lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>更新 Homebrew 在服务器端上的包目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update</div></pre></td></tr></table></figure>
<p>查看你的包是否需要更新：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew outdated</div></pre></td></tr></table></figure>
<p>更新包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew upgrade &lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>Homebrew 将会把老版本的包缓存下来，以便当你想回滚至旧版本时使用。但这是比较少使用的情况，当你想清理旧版本的包缓存时，可以运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cleanup</div></pre></td></tr></table></figure>
<p>查看你安装过的包列表（包括版本号）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew list --versions</div></pre></td></tr></table></figure>
<h2 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h2><p>你已经感受到了使用 Homebrew 安装命令行程序的便利。那么接下来，我们将通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>安装 Homebrew-cask 是如此的简单直接，运行以下命令即可完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ brew tap caskroom/cask  // 添加 Github 上的 caskroom/cask 库</div><div class="line">$ brew install brew-cask  // 安装 brew-cask</div><div class="line">$ brew cask install google-chrome // 安装 Google 浏览器</div><div class="line">$ brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup // 更新</div></pre></td></tr></table></figure>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>如果你想查看 cask 上是否存在你需要的 app，可以到 caskroom.io 进行搜索。</p>
<h2 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h2><p>有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ brew cask install qlcolorcode</div><div class="line">$ brew cask install qlstephen</div><div class="line">$ brew cask install qlmarkdown</div><div class="line">$ brew cask install quicklook-json</div><div class="line">$ brew cask install qlprettypatch</div><div class="line">$ brew cask install quicklook-csv</div><div class="line">$ brew cask install betterzipql</div><div class="line">$ brew cask install webp-quicklook</div><div class="line">$ brew cask install suspicious-package</div></pre></td></tr></table></figure>
<h2 id="OS-X-图形界面程序"><a href="#OS-X-图形界面程序" class="headerlink" title="OS X 图形界面程序"></a>OS X 图形界面程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ brew cask install alfred</div><div class="line">$ brew cask install appcleaner</div><div class="line">$ brew cask install cheatsheet</div><div class="line">$ brew cask install dropbox</div><div class="line">$ brew cask install google-chrome</div><div class="line">$ brew cask install onepassword</div><div class="line">$ brew cask install sublime-text</div><div class="line">$ brew cask install totalfinder</div><div class="line">...</div></pre></td></tr></table></figure>
<p>译注：</p>
<p>如果你经常使用 Alfred 启动程序，那么你会想 Alfred 可以搜索 brew cask 安装的程序，实现这些仅需运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew cask alfred link</div></pre></td></tr></table></figure>
<p>此外你还可以通过 brew cask 安装 launchrocket，来管理通过 brew 安装的 service</p>
<p><img src="/2017/02/06/Homebrew/14823885116857.jpg" alt=""></p>
<p>mac 系统常用的软件安装工具就是 homebrew, 其最常用的命令如下：</p>
<p>安装（需要 Ruby）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/Go/install)&quot;</div></pre></td></tr></table></figure>
<p>搜索：brew search MySQL</p>
<p>查询：brew info mysql 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</p>
<p>更新：brew update 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——</p>
<p>检查过时（是否有新版本）：brew outdated 这回列出所有安装的软件里可以升级的那些</p>
<p>升级：brew upgrade 升级所有可以升级的软件们</p>
<p>清理：brew cleanup 清理不需要的版本极其安装包缓存</p>
<p>常用的就这些。一般来说如果你追求新版本（不升级不舒服斯基），那么你最常用的操作序列就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew update          # 更新 Homebrew 的信息</div><div class="line">brew outdated        # 看一下哪些软件可以升级</div><div class="line">brew upgrade &lt;xxx&gt;   # 如果不是所有的都要升级，那就这样升级指定的</div><div class="line">brew upgrade; brew cleanup    # 如果都要升级，直接升级完然后清理干净</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://lijunyu.github.io/2017/02/05/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
