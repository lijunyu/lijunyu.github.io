<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在hexo中无痛使用本地图片]]></title>
      <url>https://lijunyu.github.io/2017/03/01/%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E7%97%9B%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h2><p>在 hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。</p>
<p>这些问题使得我一度不愿意使用本地图片而选择用图床，但被移动运营商无耻的横条广告逼得打算上 https，图床只支持 http 就成了问题。</p>
<p>hexo 下插入图片现在大概有几个方案</p>
<h3 id="1-1-放在根目录"><a href="#1-1-放在根目录" class="headerlink" title="1.1 放在根目录"></a>1.1 放在根目录</h3><p>早期大部分的方案是把图片放在 <code>source/img</code> 下，然后在 markdown 里写 <code>![img](/source/img/img.png)</code>。显然这样在本地的编辑器里完全不能正确识别图片的位置。</p>
<h3 id="1-2-asset-image"><a href="#1-2-asset-image" class="headerlink" title="1.2 asset-image"></a>1.2 asset-image</h3><p>在 hexo 2.x 时出现的插件，后来被吸纳进 <code>hexo 3 core</code> ，用法的介绍见 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="external">资源文件夹 | Hexo</a> 。比较尴尬的是，这种方法直接放弃了 markdown 原来的语法，使用类似 的语法，。markdown 本来有插入图片的语法不好好支持，专门用一个新的语法来插入本地图片，让我这种强迫症不太能接受。</p>
<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">CodeFalling/hexo-asset-image</a></p>
<h3 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h3><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。</p>
<p>在 hexo 目录，执行</p>
<p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>
<p>假设在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MacGesture2-Publish</div><div class="line">├── apppicker.jpg</div><div class="line">├── logo.jpg</div><div class="line">└── rules.jpg</div></pre></td></tr></table></figure>
<p>MacGesture2-Publish.md<br>这样的目录结构（目录名和文章名一致），只要使用 ![logo](MacGesture2-Publish/logo.jpg) 就可以插入图片。</p>
<p>生成的结构为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public/2015/10/18/MacGesture2-Publish</div><div class="line">├── apppicker.jpg</div><div class="line">├── index.html</div><div class="line">├── logo.jpg</div><div class="line">└── rules.jpg</div></pre></td></tr></table></figure>
<p>同时，生成的 html 是</p>
<p><code>&lt;img src=&quot;/2015/10/18/MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</code></p>
<p>而不是愚蠢的<br><code>&lt;img src=&quot;MacGesture2-Publish/logo.jpg&quot; alt=&quot;logo&quot;&gt;</code></p>
<p>值得一提的是，这个插件对于 <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">CodeFalling/hexo-renderer-org</a> 同样有效。</p>
<p><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">【转】在hexo中无痛使用本地图片</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何用Java进行3DES加密解]]></title>
      <url>https://lijunyu.github.io/2017/03/01/%20%E5%A6%82%E4%BD%95%E7%94%A8Java%E8%BF%9B%E8%A1%8C3DES%E5%8A%A0%E5%AF%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>原文地址 : <a href="http://weavesky.com/2008/01/05/java-3des/" target="_blank" rel="external">http://weavesky.com/2008/01/05/java-3des/</a></p>
<p>最近一个合作商提出使用3DES交换数据，本来他们有现成的代码，可惜只有.net版本，我们的服务器都是Linux，而且应用都是Java。于是对照他们提供的代码改了一个Java的版本出来，主要是不熟悉3DES，折腾了一天，终于搞定。</p>
<p>所谓3DES，就是把DES做三次，当然不是简单地DES DES DES就行了，中途有些特定的排列。这个我可不关心，呵呵，我的目的是使用它。</p>
<p>在网上搜索了一下3DES，找到很少资料。经过朋友介绍，找到GNU Crypto和Bouncy Castle两个Java扩充包，里面应该有3DES的实现吧。</p>
<p>从GNU Crypto入手，找到一个TripleDES的实现类，发现原来3DES还有一个名字叫DESede，在网上搜索TripleDES和DESede，呵呵，终于发现更多的资料了。</p>
<p>Java的安全API始终那么难用，先创建一个cipher看看算法在不在吧</p>
<pre><code>Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
</code></pre><p>如果没有抛异常的话，就证明这个算法是有效的</p>
<p>突然想看看JDK有没有内置DESede，于是撇开Crypto，直接测试，发现可以正确运行。在jce.jar里面找到相关的类，JDK内置了。</p>
<p>于是直接用DES的代码来改&amp;测试，最后代码变成这样</p>
<pre><code>SecureRandom sr = new SecureRandom();
DESedeKeySpec dks = new DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DESede&quot;);
SecretKey securekey = keyFactory.generateSecret(dks);
Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);
return new String(Hex.encodeHex(cipher.doFinal(str.getBytes())));
</code></pre><p>需要留意的是，要使用DESede的Spec、Factory和Cipher才行</p>
<p>事情还没完结，合作商给过来的除了密钥之外，还有一个IV向量。搜索了一下，发现有一个IvParameterSpec类，于是代码变成这样</p>
<pre><code>SecureRandom sr = new SecureRandom();
DESedeKeySpec dks = new DESedeKeySpec(PASSWORD_CRYPT_KEY.getBytes());
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;DESede&quot;);
SecretKey securekey = keyFactory.generateSecret(dks);
IvParameterSpec iv = new IvParameterSpec(PASSWORD_IV.getBytes());
Cipher cipher = Cipher.getInstance(&quot;DESede&quot;);
cipher.init(Cipher.ENCRYPT_MODE, securekey, iv, sr);
return new String(Hex.encodeHex(cipher.doFinal(str.getBytes())));
</code></pre><p>但是，运行报错了</p>
<pre><code>java.security.InvalidAlgorithmParameterException: ECB mode cannot use IV
</code></pre><p>ECB是什么呢？我的代码完全没有写ECB什么的</p>
<p>又上网搜索，结果把DES的来龙去脉都搞清楚了</p>
<p><a href="http://www.tropsoft.com/strongenc/des.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des.htm</a></p>
<p>ECB是其中一种字串分割方式，除了DES以外，其他加密方式也会使用这种分割方式的，而Java默认产生的DES算法就是用ECB方法，ECB不需要向量，当然也就不支持向量了</p>
<p>除了ECB，DES还支持CBC、CFB、OFB，而3DES只支持ECB和CBC两种</p>
<p><a href="http://www.tropsoft.com/strongenc/des3.htm" target="_blank" rel="external">http://www.tropsoft.com/strongenc/des3.htm</a></p>
<p>CBC支持并且必须有向量，具体算法这里就不说了。合作商给的.net代码没有声明CBC模式，似乎是.net默认的方式就是CBC的</p>
<p>于是把模式改成CBC</p>
<pre><code>Cipher cipher = Cipher.getInstance(&quot;DESede/CBC/PKCS5Padding&quot;);
</code></pre><p>成功运行了</p>
<p>后话：</p>
<p>搜索的过程中，找到一个不错的讨论</p>
<p><a href="http://www.lslnet.com/linux/dosc1/21/linux-197579.htm" target="_blank" rel="external">http://www.lslnet.com/linux/dosc1/21/linux-197579.htm</a> 在CBC（不光是DES算法）模式下，iv通过随机数（或伪随机）机制产生是一种比较常见的方法。iv的作用主要是用于产生密文的第一个block，以使最终生成的密文产生差异（明文相同的情况下），使密码攻击变得更为困难，除此之外iv并无其它用途。因此iv通过随机方式产生是一种十分简便、有效的途径。此外，在IPsec中采用了DES-CBC作为缺省的加密方式，其使用的iv是通讯包的时间戳。从原理上来说，这与随机数机制并无二致。</p>
<p>看来，向量的作用其实就是salt</p>
<p>最大的好处是，可以令到即使相同的明文，相同的密钥，能产生不同的密文</p>
<p>例如，我们用DES方式在数据保存用户密码的时候，可以另外增加一列，把向量同时保存下来，并且每次用不同的向量。这样的好处是，即使两个用户的密码是一样的，数据库保存的密文，也会不一样，就能降低猜测的可能性</p>
<p>另外一种用法，就是类似IPsec的做法，两部主机互传数据，保证两部机的时钟同步的前提下（可以取样到分钟或更高的单位避免偏差），用时钟的变化值作为向量，就能增加被sniffer数据的解密难度</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IDEA JSP往后台Action传值中文乱码的问题]]></title>
      <url>https://lijunyu.github.io/2017/02/22/JSP%E5%BE%80%E5%90%8E%E5%8F%B0Action%E4%BC%A0%E5%80%BC%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在tomcat的<strong>conf/server.xml</strong>中找到<strong>Connector</strong>标签，添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">URIEncoding=&quot;UTF-8&quot;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac IDEA get set 快捷键]]></title>
      <url>https://lijunyu.github.io/2017/02/22/get%20set%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OSX: command+n</div><div class="line">Windows: alt+insert</div></pre></td></tr></table></figure>
<p><img src="/2017/02/22/get set 快捷键/14830646741087.jpg" alt="14830646741087"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决idea控制台中文乱码]]></title>
      <url>https://lijunyu.github.io/2017/02/22/%E8%A7%A3%E5%86%B3idea%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dfile.encoding=UTF-8</div></pre></td></tr></table></figure>
<p><img src="/2017/02/22/解决idea控制台中文乱码/14824587460988.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac上搭建基于GitHub、Coding的Hexo博客]]></title>
      <url>https://lijunyu.github.io/2017/02/07/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>站在各位大牛的肩膀上，终于搭建了自己博客，我把坑填上了，你们可以踩着我过去了。。。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>官网上很详细，而且还是中文啊，有木有！！！能看懂的，就别听我在这儿瞎逼逼了，举高高双手奉上<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">Hexo官网帮助文档</a></p>
<h3 id="1-Git"><a href="#1-Git" class="headerlink" title="1.Git"></a>1.Git</h3><p>什么？你说你电脑上没有装Git？OMG，竟然还有人电脑上没有装Git？！好吧，那我告诉你你怎么装！<br>请移步到我的另外一片文章<a href="https://lijunyu.coding.me/2017/03/01/Homebrew/" target="_blank" rel="external">让Mac安装软件超级方便的Homebrew</a>，看完了之后不要告诉我你不会装git</p>
<h3 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h3><p>上面的都会了，这个跟上面一样的啦。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>环境搭好了之后就可以开始安装Hexo了，命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>输入管理员密码（Mac登录密码）即开始安装 (<code>sudo</code>:linux系统管理指令  <code>-g</code>:全局安装)</p>
<blockquote>
<p>注意坑一：Hexo官网上的安装命令是<code>$ npm install -g hexo-cli</code>，安装时不要忘记前面加上sudo，否则会因为权限问题报错。</p>
</blockquote>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>终端cd到一个你选定的目录，执行<code>hexo init</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<p>blog是你建立的文件夹名称。cd到<code>blog</code>文件夹下，执行如下命令，安装npm：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>执行如下命令，开启hexo服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>此时，浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，能看到如下页面：<br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/985173-6538ff6c494aeb9d.png" alt=""><br>看到这个页面，是不是觉得自己很帅！</p>
<h2 id="关联Github、Coding"><a href="#关联Github、Coding" class="headerlink" title="关联Github、Coding"></a>关联Github、Coding</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h4><p>登录你的Github帐号，新建仓库，名为<code>用户名.github.io</code>固定写法，如<code>lijunyu.github.io</code>即下图中所示：<br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/14883489742929.jpg" alt=""></p>
<p>本地的blog文件夹下内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">_config.yml    </div><div class="line">db.json </div><div class="line">node_modules </div><div class="line">package.json</div><div class="line">scaffolds</div><div class="line">source</div><div class="line">themes</div></pre></td></tr></table></figure>
<p>终端cd到<code>blog</code>文件夹下，<code>vim</code>打开<code>_config.yml</code>，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim _config.yml</div></pre></td></tr></table></figure>
<p>打开后往下滑到最后，修改成下边的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: https://github.com/lijunyu/lijunyu.github.io</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<p>你需要将<code>repository</code>后<code>lijunyu</code>换成你自己的用户名，地址在上图红框的位置获取。hexo 3.1.1版本后<code>type:</code>值为<code>git</code>。</p>
<blockquote>
<p>注意坑二：在配置所有的<code>_config.yml</code>文件时（包括theme中的），在所有的冒号<strong>:</strong>后边都要加一个空格，否则执行hexo命令会报错，切记 切记<br>在blog文件夹目录下执行生成静态页面命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate        或者：hexo g</div></pre></td></tr></table></figure>
<p>此时若出现如下报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found in ~/blog</div><div class="line">ERROR Try runing: &apos;npm install hexo --save&apos;</div><div class="line">则执行命令：</div><div class="line">npm install hexo --save</div><div class="line">若无报错，自行忽略此步骤。</div></pre></td></tr></table></figure>
<p>再执行配置命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy            或者：hexo d</div></pre></td></tr></table></figure>
<blockquote>
<p> 注意坑三：若执行命令<code>hexo deploy</code>仍然报错：无法连接git或找不到git，则执行如下命令来安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</blockquote>
<p>再次执行<code>hexo generate</code>和<code>hexo deploy</code>命令。</p>
<p>若你未关联Github，则执行<code>hexo deploy</code>命令时终端会提示你输入Github的用户名和密码，即</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Username for &apos;https://github.com&apos;:</div><div class="line">Password for &apos;https://github.com&apos;:</div></pre></td></tr></table></figure>
<p><code>hexo deploy</code>命令执行成功后，浏览器中打开网址<a href="https://lijunyu.github.io">https://lijunyu.github.io</a>（将lijunyu换成你的用户名）能看到和打开<a href="http://localhost:4000时一样的页面。" target="_blank" rel="external">http://localhost:4000时一样的页面。</a></p>
<p><strong>为避免每次输入Github用户名和密码的麻烦，可参照第二节方法</strong></p>
<h4 id="2-添加ssh-key到Github"><a href="#2-添加ssh-key到Github" class="headerlink" title="2. 添加ssh key到Github"></a>2. 添加ssh key到Github</h4><h5 id="2-1-检查SSH-keys是否存在Github"><a href="#2-1-检查SSH-keys是否存在Github" class="headerlink" title="2.1 检查SSH keys是否存在Github"></a>2.1 检查SSH keys是否存在Github</h5><p>执行如下命令，检查SSH keys是否存在。如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code>，则直接进入步骤1.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<h5 id="2-2-生成新的ssh-key"><a href="#2-2-生成新的ssh-key" class="headerlink" title="2.2 生成新的ssh key"></a>2.2 生成新的ssh key</h5><p>执行如下命令生成public/private rsa key pair，注意将<code>your_email@example.com</code>换成你自己注册Github的邮箱地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</div></pre></td></tr></table></figure>
<p>默认会在相应路径下（<code>~/.ssh/id_rsa.pub</code>）生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>
<h5 id="2-3-将ssh-key添加到Github中"><a href="#2-3-将ssh-key添加到Github中" class="headerlink" title="2.3 将ssh key添加到Github中"></a>2.3 将ssh key添加到Github中</h5><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开<code>id_rsa.pub</code>文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">进入Github --&gt; Settings --&gt; SSH keys --&gt; add SSH key:</div></pre></td></tr></table></figure>
<p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p>
<h4 id="3-发布文章"><a href="#3-发布文章" class="headerlink" title="3. 发布文章"></a>3. 发布文章</h4><p>终端cd到<code>blog</code>文件夹下，执行如下命令新建文章：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot;</div></pre></td></tr></table></figure>
<p>名为<code>postName.md</code>的文件会建在目录<code>/blog/source/_posts</code>下。你当然可以用vim来编辑文章。给大家推荐一款Markdown编辑器<a href="http://zh.mweb.im" target="_blank" rel="external">MWeb</a>！</p>
<p>文章编辑完成后，终端cd到<code>blog</code>文件夹下，执行如下命令来发布：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate             //生成静态页面</div><div class="line">hexo deploy            //将文章部署到Github</div></pre></td></tr></table></figure>
<h4 id="4-Page-服务"><a href="#4-Page-服务" class="headerlink" title="4. Page 服务"></a>4. Page 服务</h4><p>打开项目的<code>Settings</code>，然后找到<code>GitHub Pages</code><br><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/WX20170301-150149.png" alt=""><br>打开<a href="https://lijunyu.github.io">https://lijunyu.github.io</a>,超级帅，有木有！</p>
<h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>首先到 <a href="https://coding.net" target="_blank" rel="external">Coding</a> 上注册并开一个项目，项目名称和用户个性后缀相同（方便二级域名访问博客），拿到项目的 https 地址</p>
<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h4><p>打开本地 <code>blog</code> 目录下的 <code>_config.yml</code> 文件，修改如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: https://github.com/lijunyu/lijunyu.github.io</div><div class="line">    coding: https://git.coding.net/lijunyu/lijunyu.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h4 id="3-Staticfile"><a href="#3-Staticfile" class="headerlink" title="3. Staticfile"></a>3. Staticfile</h4><p>cd 到本地 <code>blog/source</code> 目录下执行如下命令新建 <code>Staticfile</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch Staticfile  #名字必须是Staticfile</div></pre></td></tr></table></figure>
<p>原因是 <code>coding.net</code> 需要以这个文件来作为静态文件部署的标志，就是说看到这个 <code>Staticfile</code> 就知道按照静态文件来发布。</p>
<h4 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h4><p>执行发布命令 <code>hexo g</code> 、 <code>hexo d</code></p>
<h4 id="5-域名解析"><a href="#5-域名解析" class="headerlink" title="5. 域名解析"></a>5. 域名解析</h4><p>个人域名添加两条 <code>CNAME</code> 解析。将 <code>lijunyu.github.io</code> 解析为 [海外] ，将 <code>lijunyu.coding.me</code> 解析为 [默认]</p>
<p>这样就是为了从国内访问就是访问 Coding 上的博客项目，从国外访问就是访问 GitHub 上的博客项目。</p>
<h4 id="6-Page-服务"><a href="#6-Page-服务" class="headerlink" title="6. Page 服务"></a>6. Page 服务</h4><p>到 Coding 上的博客项目主页，点击 <code>Pages服务</code> 输入部署分支 <code>master</code> 立即开启</p>
<p><img src="/2017/02/07/Mac上搭建基于GitHub的Hexo博客/WX20170301-145220.png" alt=""><br>这样就可以访问自己在 Coding 上的个人博客了 <a href="https://lijunyu.coding.me" target="_blank" rel="external">lijunyu.coding.me/lijunyu</a> 如果像这样你的用户后缀名与博客项目名称相同你还可以省略项目名称直接访问 lijunyu.coding.me</p>
<p>至此，Mac上搭建基于Github和Coding的Hexo博客就完成了。</p>
<p>给大家推荐一个超级帅的主题<a href="https://material.viosey.com" target="_blank" rel="external">material</a> ，就是我现在用的这一款啦，超级帅有木有，帅到起飞有木有！！！</p>
<p>【参考文章】 <a href="http://gonghonglou.com/2016/02/03/firstblog/" target="_blank" rel="external">Mac上搭建基于GitHub的Hexo博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[让Mac安装软件超级方便的Homebrew]]></title>
      <url>https://lijunyu.github.io/2017/02/06/Homebrew/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><a href="http://wiki.jikexueyuan.com/project/mac-dev-setup/" target="_blank" rel="external">【转】Mac 开发配置手册</a></p>
<p>包管理工具可以让你安装和更新程序变得更方便，目前在 OS X 系统中最受欢迎的包管理工具是 Homebrew.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装 Homebrew 之前，需要将 Xcode Command Line Tools 安装完成，这样你就可以使用基于 Xcode Command Line Tools 编译的 Homebrew。</p>
<p>在 terminal 中复制以下命令（不包括 $），跟随指引，将完成 Hombrew 安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>紧接着，我们需要做一件事让通过 Hombrew 安装的程序的启动链接 (在 /usr/local/bin 中）可以直接运行，无需将完整路径写出。通过以下命令将 /usr/local/bin 添加至 $PATH 环境变量中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PATH=&quot;/usr/local/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p><strong>Cmd+T</strong> 打开一个新的 terminal 标签页，运行以下命令，确保 brew 运行正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew doctor</div></pre></td></tr></table></figure>
<p>译注：</p>
<p>安装完成后，Homwbrew 会将本地 /usr/local 初始化为 git 的工作树，并将目录所有者变更为当前所操作的用户，将来 brew 的相关操作不需要 sudo 。</p>
<h2 id="Homebrew-基本使用"><a href="#Homebrew-基本使用" class="headerlink" title="Homebrew 基本使用"></a>Homebrew 基本使用</h2><p>安装一个包，可以简单的运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install &lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>更新 Homebrew 在服务器端上的包目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew update</div></pre></td></tr></table></figure>
<p>查看你的包是否需要更新：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew outdated</div></pre></td></tr></table></figure>
<p>更新包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew upgrade &lt;package_name&gt;</div></pre></td></tr></table></figure>
<p>Homebrew 将会把老版本的包缓存下来，以便当你想回滚至旧版本时使用。但这是比较少使用的情况，当你想清理旧版本的包缓存时，可以运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cleanup</div></pre></td></tr></table></figure>
<p>查看你安装过的包列表（包括版本号）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew list --versions</div></pre></td></tr></table></figure>
<h2 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h2><p>你已经感受到了使用 Homebrew 安装命令行程序的便利。那么接下来，我们将通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>安装 Homebrew-cask 是如此的简单直接，运行以下命令即可完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ brew tap caskroom/cask  // 添加 Github 上的 caskroom/cask 库</div><div class="line">$ brew install brew-cask  // 安装 brew-cask</div><div class="line">$ brew cask install google-chrome // 安装 Google 浏览器</div><div class="line">$ brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup // 更新</div></pre></td></tr></table></figure>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>如果你想查看 cask 上是否存在你需要的 app，可以到 caskroom.io 进行搜索。</p>
<h2 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h2><p>有些 插件 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ brew cask install qlcolorcode</div><div class="line">$ brew cask install qlstephen</div><div class="line">$ brew cask install qlmarkdown</div><div class="line">$ brew cask install quicklook-json</div><div class="line">$ brew cask install qlprettypatch</div><div class="line">$ brew cask install quicklook-csv</div><div class="line">$ brew cask install betterzipql</div><div class="line">$ brew cask install webp-quicklook</div><div class="line">$ brew cask install suspicious-package</div></pre></td></tr></table></figure>
<h2 id="OS-X-图形界面程序"><a href="#OS-X-图形界面程序" class="headerlink" title="OS X 图形界面程序"></a>OS X 图形界面程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ brew cask install alfred</div><div class="line">$ brew cask install appcleaner</div><div class="line">$ brew cask install cheatsheet</div><div class="line">$ brew cask install dropbox</div><div class="line">$ brew cask install google-chrome</div><div class="line">$ brew cask install onepassword</div><div class="line">$ brew cask install sublime-text</div><div class="line">$ brew cask install totalfinder</div><div class="line">...</div></pre></td></tr></table></figure>
<p>译注：</p>
<p>如果你经常使用 Alfred 启动程序，那么你会想 Alfred 可以搜索 brew cask 安装的程序，实现这些仅需运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew cask alfred link</div></pre></td></tr></table></figure>
<p>此外你还可以通过 brew cask 安装 launchrocket，来管理通过 brew 安装的 service</p>
<p><img src="/2017/02/06/Homebrew/14823885116857.jpg" alt=""></p>
<p>mac 系统常用的软件安装工具就是 homebrew, 其最常用的命令如下：</p>
<p>安装（需要 Ruby）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/Go/install)&quot;</div></pre></td></tr></table></figure>
<p>搜索：brew search MySQL</p>
<p>查询：brew info mysql 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</p>
<p>更新：brew update 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——</p>
<p>检查过时（是否有新版本）：brew outdated 这回列出所有安装的软件里可以升级的那些</p>
<p>升级：brew upgrade 升级所有可以升级的软件们</p>
<p>清理：brew cleanup 清理不需要的版本极其安装包缓存</p>
<p>常用的就这些。一般来说如果你追求新版本（不升级不舒服斯基），那么你最常用的操作序列就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew update          # 更新 Homebrew 的信息</div><div class="line">brew outdated        # 看一下哪些软件可以升级</div><div class="line">brew upgrade &lt;xxx&gt;   # 如果不是所有的都要升级，那就这样升级指定的</div><div class="line">brew upgrade; brew cleanup    # 如果都要升级，直接升级完然后清理干净</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://lijunyu.github.io/2017/02/05/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
